
USB-IO_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002e08  08002e08  00012e08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d8  20000070  08002ee8  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000248  08002ee8  00020248  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013aee  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000268a  00000000  00000000  00033b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000690d  00000000  00000000  00036218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000978  00000000  00000000  0003cb28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c58  00000000  00000000  0003d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004eca  00000000  00000000  0003e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003cd9  00000000  00000000  00042fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00046c9b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001f40  00000000  00000000  00046d18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002df0 	.word	0x08002df0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002df0 	.word	0x08002df0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_InitTick+0x3c>)
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_InitTick+0x40>)
{
 8000596:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	fbb3 f3f0 	udiv	r3, r3, r0
 80005a2:	6810      	ldr	r0, [r2, #0]
 80005a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a8:	f000 fa92 	bl	8000ad0 <HAL_SYSTICK_Config>
 80005ac:	4604      	mov	r4, r0
 80005ae:	b958      	cbnz	r0, 80005c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	2d0f      	cmp	r5, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	4602      	mov	r2, r0
 80005b6:	4629      	mov	r1, r5
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005bc:	f000 fa48 	bl	8000a50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_InitTick+0x44>)
 80005c2:	4620      	mov	r0, r4
 80005c4:	601d      	str	r5, [r3, #0]
 80005c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ca:	bd38      	pop	{r3, r4, r5, pc}
 80005cc:	20000008 	.word	0x20000008
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_Init>:
{
 80005d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_Init+0x30>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 fa19 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffc8 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 8000600:	f001 fe20 	bl	8002244 <HAL_MspInit>
}
 8000604:	2000      	movs	r0, #0
 8000606:	bd08      	pop	{r3, pc}
 8000608:	40023c00 	.word	0x40023c00

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x10>)
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x14>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	440b      	add	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000098 	.word	0x20000098
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_GetTick+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000098 	.word	0x20000098

08000630 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000630:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000632:	4604      	mov	r4, r0
 8000634:	2800      	cmp	r0, #0
 8000636:	f000 8099 	beq.w	800076c <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800063a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800063c:	b923      	cbnz	r3, 8000648 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800063e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000640:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000644:	f001 fe1e 	bl	8002284 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800064a:	06db      	lsls	r3, r3, #27
 800064c:	f100 808c 	bmi.w	8000768 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000652:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000656:	f023 0302 	bic.w	r3, r3, #2
 800065a:	f043 0302 	orr.w	r3, r3, #2
 800065e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000660:	4b43      	ldr	r3, [pc, #268]	; (8000770 <HAL_ADC_Init+0x140>)
 8000662:	685a      	ldr	r2, [r3, #4]
 8000664:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000668:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	6861      	ldr	r1, [r4, #4]
 800066e:	430a      	orrs	r2, r1
 8000670:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000672:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000674:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800067c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000686:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000688:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800068a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800068e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	430a      	orrs	r2, r1
 8000694:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000696:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000698:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800069a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800069e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006a6:	4933      	ldr	r1, [pc, #204]	; (8000774 <HAL_ADC_Init+0x144>)
 80006a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006aa:	428a      	cmp	r2, r1
 80006ac:	d050      	beq.n	8000750 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006ae:	6899      	ldr	r1, [r3, #8]
 80006b0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80006b4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80006b6:	6899      	ldr	r1, [r3, #8]
 80006b8:	430a      	orrs	r2, r1
 80006ba:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006bc:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006ca:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006cc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006ce:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006d0:	f022 0202 	bic.w	r2, r2, #2
 80006d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006d6:	689a      	ldr	r2, [r3, #8]
 80006d8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80006dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80006de:	6a22      	ldr	r2, [r4, #32]
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	d03d      	beq.n	8000760 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006e4:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006ec:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006f4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	3901      	subs	r1, #1
 80006fa:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000702:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000704:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800070a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070c:	3901      	subs	r1, #1
 800070e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000714:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000716:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000718:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800071c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000724:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000726:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000728:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800072a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800072e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000730:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000732:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000734:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000738:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800073a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800073c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800073e:	f023 0303 	bic.w	r3, r3, #3
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000748:	2300      	movs	r3, #0
 800074a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800074e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000750:	689a      	ldr	r2, [r3, #8]
 8000752:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000756:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800075e:	e7b4      	b.n	80006ca <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000766:	e7ca      	b.n	80006fe <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000768:	2001      	movs	r0, #1
 800076a:	e7ed      	b.n	8000748 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 800076c:	2001      	movs	r0, #1
}
 800076e:	bd10      	pop	{r4, pc}
 8000770:	40012300 	.word	0x40012300
 8000774:	0f000001 	.word	0x0f000001

08000778 <HAL_ADC_Start_DMA>:
{
 8000778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800077a:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 800077c:	2200      	movs	r2, #0
 800077e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000780:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000784:	2a01      	cmp	r2, #1
{
 8000786:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000788:	d065      	beq.n	8000856 <HAL_ADC_Start_DMA+0xde>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800078a:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 800078c:	2201      	movs	r2, #1
 800078e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000792:	68aa      	ldr	r2, [r5, #8]
 8000794:	07d2      	lsls	r2, r2, #31
 8000796:	d505      	bpl.n	80007a4 <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000798:	68aa      	ldr	r2, [r5, #8]
 800079a:	07d0      	lsls	r0, r2, #31
 800079c:	d415      	bmi.n	80007ca <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 800079e:	2000      	movs	r0, #0
}
 80007a0:	b003      	add	sp, #12
 80007a2:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80007a4:	68aa      	ldr	r2, [r5, #8]
 80007a6:	f042 0201 	orr.w	r2, r2, #1
 80007aa:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007ac:	4a2b      	ldr	r2, [pc, #172]	; (800085c <HAL_ADC_Start_DMA+0xe4>)
 80007ae:	6810      	ldr	r0, [r2, #0]
 80007b0:	4a2b      	ldr	r2, [pc, #172]	; (8000860 <HAL_ADC_Start_DMA+0xe8>)
 80007b2:	fbb0 f0f2 	udiv	r0, r0, r2
 80007b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80007ba:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80007bc:	9a01      	ldr	r2, [sp, #4]
 80007be:	2a00      	cmp	r2, #0
 80007c0:	d0ea      	beq.n	8000798 <HAL_ADC_Start_DMA+0x20>
      counter--;
 80007c2:	9a01      	ldr	r2, [sp, #4]
 80007c4:	3a01      	subs	r2, #1
 80007c6:	9201      	str	r2, [sp, #4]
 80007c8:	e7f8      	b.n	80007bc <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 80007ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80007cc:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80007d0:	f020 0001 	bic.w	r0, r0, #1
 80007d4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80007d8:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007da:	686a      	ldr	r2, [r5, #4]
 80007dc:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007de:	bf41      	itttt	mi
 80007e0:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 80007e2:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80007e6:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80007ea:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007f4:	bf1c      	itt	ne
 80007f6:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 80007f8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80007fc:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 80007fe:	2200      	movs	r2, #0
 8000800:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_ADC_Start_DMA+0xec>)
 8000806:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000808:	4a17      	ldr	r2, [pc, #92]	; (8000868 <HAL_ADC_Start_DMA+0xf0>)
 800080a:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800080c:	4a17      	ldr	r2, [pc, #92]	; (800086c <HAL_ADC_Start_DMA+0xf4>)
 800080e:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000810:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000814:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000816:	686a      	ldr	r2, [r5, #4]
 8000818:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800081c:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800081e:	68aa      	ldr	r2, [r5, #8]
 8000820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000824:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000826:	460a      	mov	r2, r1
 8000828:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800082c:	f000 f9fa 	bl	8000c24 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_ADC_Start_DMA+0xf8>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f013 0f1f 	tst.w	r3, #31
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	d108      	bne.n	800084e <HAL_ADC_Start_DMA+0xd6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800083c:	6898      	ldr	r0, [r3, #8]
 800083e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000842:	d1ac      	bne.n	800079e <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000844:	689a      	ldr	r2, [r3, #8]
 8000846:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	e7a8      	b.n	80007a0 <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800084e:	4a09      	ldr	r2, [pc, #36]	; (8000874 <HAL_ADC_Start_DMA+0xfc>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d1a4      	bne.n	800079e <HAL_ADC_Start_DMA+0x26>
 8000854:	e7f2      	b.n	800083c <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 8000856:	2002      	movs	r0, #2
 8000858:	e7a2      	b.n	80007a0 <HAL_ADC_Start_DMA+0x28>
 800085a:	bf00      	nop
 800085c:	20000008 	.word	0x20000008
 8000860:	000f4240 	.word	0x000f4240
 8000864:	0800087b 	.word	0x0800087b
 8000868:	080008dd 	.word	0x080008dd
 800086c:	080008e9 	.word	0x080008e9
 8000870:	40012300 	.word	0x40012300
 8000874:	40012000 	.word	0x40012000

08000878 <HAL_ADC_ConvCpltCallback>:
 8000878:	4770      	bx	lr

0800087a <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800087a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800087c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800087e:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8000882:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000884:	d124      	bne.n	80008d0 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800088c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	6891      	ldr	r1, [r2, #8]
 8000892:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000896:	d117      	bne.n	80008c8 <ADC_DMAConvCplt+0x4e>
 8000898:	6999      	ldr	r1, [r3, #24]
 800089a:	b9a9      	cbnz	r1, 80008c8 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800089c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800089e:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80008a2:	d002      	beq.n	80008aa <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008a4:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80008a6:	0549      	lsls	r1, r1, #21
 80008a8:	d40e      	bmi.n	80008c8 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80008aa:	6851      	ldr	r1, [r2, #4]
 80008ac:	f021 0120 	bic.w	r1, r1, #32
 80008b0:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80008b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008b8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008bc:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008be:	bf5e      	ittt	pl
 80008c0:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 80008c2:	f042 0201 	orrpl.w	r2, r2, #1
 80008c6:	641a      	strpl	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ffd5 	bl	8000878 <HAL_ADC_ConvCpltCallback>
 80008ce:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80008d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 80008d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80008d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d8:	4718      	bx	r3

080008da <HAL_ADC_ConvHalfCpltCallback>:
 80008da:	4770      	bx	lr

080008dc <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80008dc:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80008de:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80008e0:	f7ff fffb 	bl	80008da <HAL_ADC_ConvHalfCpltCallback>
 80008e4:	bd08      	pop	{r3, pc}

080008e6 <HAL_ADC_ErrorCallback>:
{
 80008e6:	4770      	bx	lr

080008e8 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80008e8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80008ea:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80008f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80008f8:	f7ff fff5 	bl	80008e6 <HAL_ADC_ErrorCallback>
 80008fc:	bd08      	pop	{r3, pc}
	...

08000900 <HAL_ADC_ConfigChannel>:
{
 8000900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000902:	2300      	movs	r3, #0
 8000904:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000906:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800090a:	2b01      	cmp	r3, #1
 800090c:	f000 8083 	beq.w	8000a16 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000910:	680d      	ldr	r5, [r1, #0]
 8000912:	6804      	ldr	r4, [r0, #0]
 8000914:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000916:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000918:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800091a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800091e:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000920:	d92a      	bls.n	8000978 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000922:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000926:	68e7      	ldr	r7, [r4, #12]
 8000928:	3b1e      	subs	r3, #30
 800092a:	f04f 0e07 	mov.w	lr, #7
 800092e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000932:	ea27 070e 	bic.w	r7, r7, lr
 8000936:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000938:	68e7      	ldr	r7, [r4, #12]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	433b      	orrs	r3, r7
 8000940:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000942:	684a      	ldr	r2, [r1, #4]
 8000944:	2a06      	cmp	r2, #6
 8000946:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800094a:	d825      	bhi.n	8000998 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800094c:	4413      	add	r3, r2
 800094e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000950:	1f59      	subs	r1, r3, #5
 8000952:	231f      	movs	r3, #31
 8000954:	408b      	lsls	r3, r1
 8000956:	ea27 0303 	bic.w	r3, r7, r3
 800095a:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800095c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800095e:	fa06 f101 	lsl.w	r1, r6, r1
 8000962:	4311      	orrs	r1, r2
 8000964:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <HAL_ADC_ConfigChannel+0x11c>)
 8000968:	429c      	cmp	r4, r3
 800096a:	d034      	beq.n	80009d6 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 800096c:	2300      	movs	r3, #0
 800096e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000972:	4618      	mov	r0, r3
}
 8000974:	b003      	add	sp, #12
 8000976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000978:	6927      	ldr	r7, [r4, #16]
 800097a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800097e:	f04f 0e07 	mov.w	lr, #7
 8000982:	fa0e fe03 	lsl.w	lr, lr, r3
 8000986:	ea27 070e 	bic.w	r7, r7, lr
 800098a:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800098c:	6927      	ldr	r7, [r4, #16]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	433b      	orrs	r3, r7
 8000994:	6123      	str	r3, [r4, #16]
 8000996:	e7d4      	b.n	8000942 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000998:	2a0c      	cmp	r2, #12
 800099a:	d80e      	bhi.n	80009ba <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800099c:	4413      	add	r3, r2
 800099e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80009a0:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80009a4:	231f      	movs	r3, #31
 80009a6:	4093      	lsls	r3, r2
 80009a8:	ea21 0303 	bic.w	r3, r1, r3
 80009ac:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80009ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009b0:	fa06 f202 	lsl.w	r2, r6, r2
 80009b4:	431a      	orrs	r2, r3
 80009b6:	6322      	str	r2, [r4, #48]	; 0x30
 80009b8:	e7d5      	b.n	8000966 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009ba:	4413      	add	r3, r2
 80009bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80009be:	3b41      	subs	r3, #65	; 0x41
 80009c0:	221f      	movs	r2, #31
 80009c2:	409a      	lsls	r2, r3
 80009c4:	ea21 0202 	bic.w	r2, r1, r2
 80009c8:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80009ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009cc:	fa06 f103 	lsl.w	r1, r6, r3
 80009d0:	4311      	orrs	r1, r2
 80009d2:	62e1      	str	r1, [r4, #44]	; 0x2c
 80009d4:	e7c7      	b.n	8000966 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80009d6:	2d12      	cmp	r5, #18
 80009d8:	d104      	bne.n	80009e4 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <HAL_ADC_ConfigChannel+0x120>)
 80009dc:	6853      	ldr	r3, [r2, #4]
 80009de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e2:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80009e4:	f1a5 0310 	sub.w	r3, r5, #16
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d8bf      	bhi.n	800096c <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009ec:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <HAL_ADC_ConfigChannel+0x120>)
 80009ee:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009f0:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009f6:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009f8:	d1b8      	bne.n	800096c <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_ADC_ConfigChannel+0x124>)
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_ADC_ConfigChannel+0x128>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a04:	230a      	movs	r3, #10
 8000a06:	4353      	muls	r3, r2
        counter--;
 8000a08:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000a0a:	9b01      	ldr	r3, [sp, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0ad      	beq.n	800096c <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8000a10:	9b01      	ldr	r3, [sp, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	e7f8      	b.n	8000a08 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8000a16:	2002      	movs	r0, #2
 8000a18:	e7ac      	b.n	8000974 <HAL_ADC_ConfigChannel+0x74>
 8000a1a:	bf00      	nop
 8000a1c:	40012000 	.word	0x40012000
 8000a20:	40012300 	.word	0x40012300
 8000a24:	20000008 	.word	0x20000008
 8000a28:	000f4240 	.word	0x000f4240

08000a2c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a2e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a34:	041b      	lsls	r3, r3, #16
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a3c:	0200      	lsls	r0, r0, #8
 8000a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a42:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a46:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a48:	60d3      	str	r3, [r2, #12]
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a52:	b530      	push	{r4, r5, lr}
 8000a54:	68dc      	ldr	r4, [r3, #12]
 8000a56:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	bf28      	it	cs
 8000a64:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 0501 	mov.w	r5, #1
 8000a6c:	fa05 f303 	lsl.w	r3, r5, r3
 8000a70:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a74:	bf8c      	ite	hi
 8000a76:	3c03      	subhi	r4, #3
 8000a78:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7a:	4019      	ands	r1, r3
 8000a7c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7e:	fa05 f404 	lsl.w	r4, r5, r4
 8000a82:	3c01      	subs	r4, #1
 8000a84:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000a86:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	ea42 0201 	orr.w	r2, r2, r1
 8000a8c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	bfaf      	iteee	ge
 8000a92:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	f000 000f 	andlt.w	r0, r0, #15
 8000a9a:	4b06      	ldrlt	r3, [pc, #24]	; (8000ab4 <HAL_NVIC_SetPriority+0x64>)
 8000a9c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	bfa5      	ittet	ge
 8000aa0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000aa4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000aac:	bd30      	pop	{r4, r5, pc}
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00
 8000ab4:	e000ed14 	.word	0xe000ed14

08000ab8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ab8:	0942      	lsrs	r2, r0, #5
 8000aba:	2301      	movs	r3, #1
 8000abc:	f000 001f 	and.w	r0, r0, #31
 8000ac0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ac4:	4b01      	ldr	r3, [pc, #4]	; (8000acc <HAL_NVIC_EnableIRQ+0x14>)
 8000ac6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	3801      	subs	r0, #1
 8000ad2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ad6:	d20a      	bcs.n	8000aee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000adc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	21f0      	movs	r1, #240	; 0xf0
 8000ae0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000afc:	6803      	ldr	r3, [r0, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000b04:	f023 0303 	bic.w	r3, r3, #3
 8000b08:	2118      	movs	r1, #24
 8000b0a:	3a10      	subs	r2, #16
 8000b0c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b10:	4904      	ldr	r1, [pc, #16]	; (8000b24 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000b12:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000b14:	bf88      	it	hi
 8000b16:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b18:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000b1a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b1c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000b1e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	08002e08 	.word	0x08002e08

08000b28 <HAL_DMA_Init>:
{
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff fd7a 	bl	8000624 <HAL_GetTick>
 8000b30:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d071      	beq.n	8000c1a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000b36:	2300      	movs	r3, #0
 8000b38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000b3c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000b44:	6813      	ldr	r3, [r2, #0]
 8000b46:	f023 0301 	bic.w	r3, r3, #1
 8000b4a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b4c:	6821      	ldr	r1, [r4, #0]
 8000b4e:	680b      	ldr	r3, [r1, #0]
 8000b50:	07d8      	lsls	r0, r3, #31
 8000b52:	d43c      	bmi.n	8000bce <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000b54:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b56:	4d32      	ldr	r5, [pc, #200]	; (8000c20 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b58:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b5a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b5c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b5e:	68a3      	ldr	r3, [r4, #8]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	68e2      	ldr	r2, [r4, #12]
 8000b64:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b66:	6922      	ldr	r2, [r4, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	6962      	ldr	r2, [r4, #20]
 8000b6c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b6e:	69e2      	ldr	r2, [r4, #28]
 8000b70:	4303      	orrs	r3, r0
 8000b72:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b74:	6a22      	ldr	r2, [r4, #32]
 8000b76:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b7a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b7c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b80:	bf01      	itttt	eq
 8000b82:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000b84:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000b86:	4335      	orreq	r5, r6
 8000b88:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000b8a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000b8c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b8e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b90:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000b94:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b98:	d10b      	bne.n	8000bb2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000b9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b9c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000b9e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ba0:	b13d      	cbz	r5, 8000bb2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000ba2:	b9f8      	cbnz	r0, 8000be4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000ba4:	2a01      	cmp	r2, #1
 8000ba6:	d02d      	beq.n	8000c04 <HAL_DMA_Init+0xdc>
 8000ba8:	d301      	bcc.n	8000bae <HAL_DMA_Init+0x86>
 8000baa:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000bac:	d101      	bne.n	8000bb2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bae:	01ea      	lsls	r2, r5, #7
 8000bb0:	d42b      	bmi.n	8000c0a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000bb2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f7ff ffa1 	bl	8000afc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000bbc:	233f      	movs	r3, #63	; 0x3f
 8000bbe:	4093      	lsls	r3, r2
 8000bc0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000bc4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000bc8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000bce:	f7ff fd29 	bl	8000624 <HAL_GetTick>
 8000bd2:	1b40      	subs	r0, r0, r5
 8000bd4:	2805      	cmp	r0, #5
 8000bd6:	d9b9      	bls.n	8000b4c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000bd8:	2320      	movs	r3, #32
 8000bda:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bdc:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000bde:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000be4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000be8:	d113      	bne.n	8000c12 <HAL_DMA_Init+0xea>
    switch (tmp)
 8000bea:	2a03      	cmp	r2, #3
 8000bec:	d8e1      	bhi.n	8000bb2 <HAL_DMA_Init+0x8a>
 8000bee:	a001      	add	r0, pc, #4	; (adr r0, 8000bf4 <HAL_DMA_Init+0xcc>)
 8000bf0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000bf4:	08000c0b 	.word	0x08000c0b
 8000bf8:	08000baf 	.word	0x08000baf
 8000bfc:	08000c0b 	.word	0x08000c0b
 8000c00:	08000c05 	.word	0x08000c05
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000c04:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000c08:	d1d3      	bne.n	8000bb2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000c0e:	2001      	movs	r0, #1
 8000c10:	e7e5      	b.n	8000bde <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000c12:	2a02      	cmp	r2, #2
 8000c14:	d9f9      	bls.n	8000c0a <HAL_DMA_Init+0xe2>
 8000c16:	2a03      	cmp	r2, #3
 8000c18:	e7c8      	b.n	8000bac <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	bd70      	pop	{r4, r5, r6, pc}
 8000c1e:	bf00      	nop
 8000c20:	f010803f 	.word	0xf010803f

08000c24 <HAL_DMA_Start_IT>:
{
 8000c24:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000c26:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000c2a:	2c01      	cmp	r4, #1
 8000c2c:	d036      	beq.n	8000c9c <HAL_DMA_Start_IT+0x78>
 8000c2e:	2401      	movs	r4, #1
 8000c30:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c34:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c38:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c3a:	2c01      	cmp	r4, #1
 8000c3c:	f04f 0500 	mov.w	r5, #0
 8000c40:	f04f 0402 	mov.w	r4, #2
 8000c44:	d128      	bne.n	8000c98 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c46:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c4a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c4c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c4e:	6825      	ldr	r5, [r4, #0]
 8000c50:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000c54:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000c56:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c58:	6883      	ldr	r3, [r0, #8]
 8000c5a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000c5c:	bf0e      	itee	eq
 8000c5e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000c60:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000c62:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c64:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000c66:	bf08      	it	eq
 8000c68:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c6a:	233f      	movs	r3, #63	; 0x3f
 8000c6c:	4093      	lsls	r3, r2
 8000c6e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	f043 0316 	orr.w	r3, r3, #22
 8000c76:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000c78:	6963      	ldr	r3, [r4, #20]
 8000c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000c80:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c82:	b11b      	cbz	r3, 8000c8c <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000c84:	6823      	ldr	r3, [r4, #0]
 8000c86:	f043 0308 	orr.w	r3, r3, #8
 8000c8a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c94:	2000      	movs	r0, #0
 8000c96:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000c98:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000c9c:	2002      	movs	r0, #2
}
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}

08000ca0 <HAL_DMA_IRQHandler>:
{
 8000ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ca6:	4b5a      	ldr	r3, [pc, #360]	; (8000e10 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ca8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000caa:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cac:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000cae:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cb0:	2208      	movs	r2, #8
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	4216      	tst	r6, r2
{
 8000cb6:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cb8:	d00c      	beq.n	8000cd4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000cba:	6801      	ldr	r1, [r0, #0]
 8000cbc:	6808      	ldr	r0, [r1, #0]
 8000cbe:	0740      	lsls	r0, r0, #29
 8000cc0:	d508      	bpl.n	8000cd4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000cc2:	6808      	ldr	r0, [r1, #0]
 8000cc4:	f020 0004 	bic.w	r0, r0, #4
 8000cc8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000cca:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ccc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000cce:	f042 0201 	orr.w	r2, r2, #1
 8000cd2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	4216      	tst	r6, r2
 8000cda:	d008      	beq.n	8000cee <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000cdc:	6821      	ldr	r1, [r4, #0]
 8000cde:	6949      	ldr	r1, [r1, #20]
 8000ce0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ce2:	bf41      	itttt	mi
 8000ce4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ce6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000ce8:	f042 0202 	orrmi.w	r2, r2, #2
 8000cec:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cee:	2204      	movs	r2, #4
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	4216      	tst	r6, r2
 8000cf4:	d008      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000cf6:	6821      	ldr	r1, [r4, #0]
 8000cf8:	6809      	ldr	r1, [r1, #0]
 8000cfa:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000cfc:	bf41      	itttt	mi
 8000cfe:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000d00:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000d02:	f042 0204 	orrmi.w	r2, r2, #4
 8000d06:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000d08:	2210      	movs	r2, #16
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	4216      	tst	r6, r2
 8000d0e:	d010      	beq.n	8000d32 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	6819      	ldr	r1, [r3, #0]
 8000d14:	0709      	lsls	r1, r1, #28
 8000d16:	d50c      	bpl.n	8000d32 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000d18:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	0350      	lsls	r0, r2, #13
 8000d1e:	d535      	bpl.n	8000d8c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	0319      	lsls	r1, r3, #12
 8000d24:	d401      	bmi.n	8000d2a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d28:	e000      	b.n	8000d2c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000d2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000d2c:	b10b      	cbz	r3, 8000d32 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000d2e:	4620      	mov	r0, r4
 8000d30:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d32:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000d34:	2220      	movs	r2, #32
 8000d36:	408a      	lsls	r2, r1
 8000d38:	4216      	tst	r6, r2
 8000d3a:	d038      	beq.n	8000dae <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	06c6      	lsls	r6, r0, #27
 8000d42:	d534      	bpl.n	8000dae <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d44:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d46:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000d4a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d4c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d4e:	d125      	bne.n	8000d9c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d50:	f022 0216 	bic.w	r2, r2, #22
 8000d54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d56:	695a      	ldr	r2, [r3, #20]
 8000d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d5c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d60:	b90a      	cbnz	r2, 8000d66 <HAL_DMA_IRQHandler+0xc6>
 8000d62:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000d64:	b11a      	cbz	r2, 8000d6e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	f022 0208 	bic.w	r2, r2, #8
 8000d6c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d6e:	233f      	movs	r3, #63	; 0x3f
 8000d70:	408b      	lsls	r3, r1
 8000d72:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000d74:	2300      	movs	r3, #0
 8000d76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000d80:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000d82:	b10b      	cbz	r3, 8000d88 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000d84:	4620      	mov	r0, r4
 8000d86:	4798      	blx	r3
}
 8000d88:	b003      	add	sp, #12
 8000d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d90:	bf5e      	ittt	pl
 8000d92:	681a      	ldrpl	r2, [r3, #0]
 8000d94:	f022 0208 	bicpl.w	r2, r2, #8
 8000d98:	601a      	strpl	r2, [r3, #0]
 8000d9a:	e7c4      	b.n	8000d26 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d9c:	0350      	lsls	r0, r2, #13
 8000d9e:	d528      	bpl.n	8000df2 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	0319      	lsls	r1, r3, #12
 8000da4:	d432      	bmi.n	8000e0c <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000da6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000da8:	b10b      	cbz	r3, 8000dae <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000daa:	4620      	mov	r0, r4
 8000dac:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000dae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0e9      	beq.n	8000d88 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000db4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000db6:	07da      	lsls	r2, r3, #31
 8000db8:	d519      	bpl.n	8000dee <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dba:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000dbc:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dbe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000dc2:	6813      	ldr	r3, [r2, #0]
 8000dc4:	f023 0301 	bic.w	r3, r3, #1
 8000dc8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000dca:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000dce:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000dd2:	9b01      	ldr	r3, [sp, #4]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	429f      	cmp	r7, r3
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	d302      	bcc.n	8000de2 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000ddc:	6813      	ldr	r3, [r2, #0]
 8000dde:	07db      	lsls	r3, r3, #31
 8000de0:	d4f7      	bmi.n	8000dd2 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000de2:	2300      	movs	r3, #0
 8000de4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000dee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000df0:	e7c7      	b.n	8000d82 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000df8:	d108      	bne.n	8000e0c <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000dfa:	6819      	ldr	r1, [r3, #0]
 8000dfc:	f021 0110 	bic.w	r1, r1, #16
 8000e00:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000e02:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000e04:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000e08:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000e0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e0e:	e7cb      	b.n	8000da8 <HAL_DMA_IRQHandler+0x108>
 8000e10:	20000008 	.word	0x20000008

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e18:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000fbc <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e20:	4a64      	ldr	r2, [pc, #400]	; (8000fb4 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000e24:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e28:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000e2c:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e30:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000e34:	42b7      	cmp	r7, r6
 8000e36:	f040 80ad 	bne.w	8000f94 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3a:	684c      	ldr	r4, [r1, #4]
 8000e3c:	f024 0a10 	bic.w	sl, r4, #16
 8000e40:	f1ba 0f02 	cmp.w	sl, #2
 8000e44:	d116      	bne.n	8000e74 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000e46:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000e4a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e4e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e52:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e56:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e5a:	f04f 0e0f 	mov.w	lr, #15
 8000e5e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000e62:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e66:	690d      	ldr	r5, [r1, #16]
 8000e68:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e6c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000e70:	f8cc 5020 	str.w	r5, [ip, #32]
 8000e74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e78:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e7a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e82:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e84:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e88:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e90:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e94:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e98:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9c:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000e9e:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea2:	d815      	bhi.n	8000ed0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000ea4:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea8:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eac:	68cd      	ldr	r5, [r1, #12]
 8000eae:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000eb2:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000eb6:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000eba:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebe:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec2:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000ec6:	fa0e fe03 	lsl.w	lr, lr, r3
 8000eca:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000ece:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ed0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ed2:	9d00      	ldr	r5, [sp, #0]
 8000ed4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed6:	688f      	ldr	r7, [r1, #8]
 8000ed8:	fa07 f70c 	lsl.w	r7, r7, ip
 8000edc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ede:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee0:	00e5      	lsls	r5, r4, #3
 8000ee2:	d557      	bpl.n	8000f94 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee4:	f04f 0b00 	mov.w	fp, #0
 8000ee8:	f8cd b00c 	str.w	fp, [sp, #12]
 8000eec:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef0:	4d31      	ldr	r5, [pc, #196]	; (8000fb8 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ef6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000efa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000efe:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f02:	9703      	str	r7, [sp, #12]
 8000f04:	9f03      	ldr	r7, [sp, #12]
 8000f06:	f023 0703 	bic.w	r7, r3, #3
 8000f0a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f0e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f12:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f1a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f1e:	f04f 0e0f 	mov.w	lr, #15
 8000f22:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f26:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2c:	d039      	beq.n	8000fa2 <HAL_GPIO_Init+0x18e>
 8000f2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f32:	42a8      	cmp	r0, r5
 8000f34:	d037      	beq.n	8000fa6 <HAL_GPIO_Init+0x192>
 8000f36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f3a:	42a8      	cmp	r0, r5
 8000f3c:	d035      	beq.n	8000faa <HAL_GPIO_Init+0x196>
 8000f3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f42:	42a8      	cmp	r0, r5
 8000f44:	d033      	beq.n	8000fae <HAL_GPIO_Init+0x19a>
 8000f46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f4a:	42a8      	cmp	r0, r5
 8000f4c:	bf14      	ite	ne
 8000f4e:	2507      	movne	r5, #7
 8000f50:	2504      	moveq	r5, #4
 8000f52:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f56:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000f5c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f60:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f64:	bf0c      	ite	eq
 8000f66:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f68:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000f6a:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000f6c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f6e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f72:	bf0c      	ite	eq
 8000f74:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f76:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000f78:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f80:	bf0c      	ite	eq
 8000f82:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f84:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f86:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f88:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f8a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	bf54      	ite	pl
 8000f8e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000f90:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000f92:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f94:	3301      	adds	r3, #1
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	f47f af47 	bne.w	8000e2a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000f9c:	b005      	add	sp, #20
 8000f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa2:	465d      	mov	r5, fp
 8000fa4:	e7d5      	b.n	8000f52 <HAL_GPIO_Init+0x13e>
 8000fa6:	2501      	movs	r5, #1
 8000fa8:	e7d3      	b.n	8000f52 <HAL_GPIO_Init+0x13e>
 8000faa:	2502      	movs	r5, #2
 8000fac:	e7d1      	b.n	8000f52 <HAL_GPIO_Init+0x13e>
 8000fae:	2503      	movs	r5, #3
 8000fb0:	e7cf      	b.n	8000f52 <HAL_GPIO_Init+0x13e>
 8000fb2:	bf00      	nop
 8000fb4:	40013c00 	.word	0x40013c00
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc0:	b10a      	cbz	r2, 8000fc6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fc2:	6181      	str	r1, [r0, #24]
 8000fc4:	4770      	bx	lr
 8000fc6:	0409      	lsls	r1, r1, #16
 8000fc8:	e7fb      	b.n	8000fc2 <HAL_GPIO_WritePin+0x2>
	...

08000fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	b918      	cbnz	r0, 8000fdc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000fd4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000fd6:	b002      	add	sp, #8
 8000fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fdc:	6803      	ldr	r3, [r0, #0]
 8000fde:	07dd      	lsls	r5, r3, #31
 8000fe0:	d410      	bmi.n	8001004 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	0798      	lsls	r0, r3, #30
 8000fe6:	d458      	bmi.n	800109a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	071a      	lsls	r2, r3, #28
 8000fec:	f100 809a 	bmi.w	8001124 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	075b      	lsls	r3, r3, #29
 8000ff4:	f100 80b8 	bmi.w	8001168 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ff8:	69a2      	ldr	r2, [r4, #24]
 8000ffa:	2a00      	cmp	r2, #0
 8000ffc:	f040 8119 	bne.w	8001232 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001000:	2000      	movs	r0, #0
 8001002:	e7e8      	b.n	8000fd6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001004:	4ba6      	ldr	r3, [pc, #664]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	f002 020c 	and.w	r2, r2, #12
 800100c:	2a04      	cmp	r2, #4
 800100e:	d007      	beq.n	8001020 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001016:	2a08      	cmp	r2, #8
 8001018:	d10a      	bne.n	8001030 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	0259      	lsls	r1, r3, #9
 800101e:	d507      	bpl.n	8001030 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	4b9f      	ldr	r3, [pc, #636]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	039a      	lsls	r2, r3, #14
 8001026:	d5dc      	bpl.n	8000fe2 <HAL_RCC_OscConfig+0x16>
 8001028:	6863      	ldr	r3, [r4, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1d9      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x16>
 800102e:	e7d1      	b.n	8000fd4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001030:	6863      	ldr	r3, [r4, #4]
 8001032:	4d9b      	ldr	r5, [pc, #620]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
 8001034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001038:	d111      	bne.n	800105e <HAL_RCC_OscConfig+0x92>
 800103a:	682b      	ldr	r3, [r5, #0]
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001042:	f7ff faef 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	4d96      	ldr	r5, [pc, #600]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001048:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104a:	682b      	ldr	r3, [r5, #0]
 800104c:	039b      	lsls	r3, r3, #14
 800104e:	d4c8      	bmi.n	8000fe2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fae8 	bl	8000624 <HAL_GetTick>
 8001054:	1b80      	subs	r0, r0, r6
 8001056:	2864      	cmp	r0, #100	; 0x64
 8001058:	d9f7      	bls.n	800104a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800105a:	2003      	movs	r0, #3
 800105c:	e7bb      	b.n	8000fd6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800105e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001062:	d104      	bne.n	800106e <HAL_RCC_OscConfig+0xa2>
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800106a:	602b      	str	r3, [r5, #0]
 800106c:	e7e5      	b.n	800103a <HAL_RCC_OscConfig+0x6e>
 800106e:	682a      	ldr	r2, [r5, #0]
 8001070:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001074:	602a      	str	r2, [r5, #0]
 8001076:	682a      	ldr	r2, [r5, #0]
 8001078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800107c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1df      	bne.n	8001042 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001082:	f7ff facf 	bl	8000624 <HAL_GetTick>
 8001086:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	039f      	lsls	r7, r3, #14
 800108c:	d5a9      	bpl.n	8000fe2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800108e:	f7ff fac9 	bl	8000624 <HAL_GetTick>
 8001092:	1b80      	subs	r0, r0, r6
 8001094:	2864      	cmp	r0, #100	; 0x64
 8001096:	d9f7      	bls.n	8001088 <HAL_RCC_OscConfig+0xbc>
 8001098:	e7df      	b.n	800105a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800109a:	4b81      	ldr	r3, [pc, #516]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	f012 0f0c 	tst.w	r2, #12
 80010a2:	d007      	beq.n	80010b4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010aa:	2a08      	cmp	r2, #8
 80010ac:	d111      	bne.n	80010d2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	025e      	lsls	r6, r3, #9
 80010b2:	d40e      	bmi.n	80010d2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b4:	4b7a      	ldr	r3, [pc, #488]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	0795      	lsls	r5, r2, #30
 80010ba:	d502      	bpl.n	80010c2 <HAL_RCC_OscConfig+0xf6>
 80010bc:	68e2      	ldr	r2, [r4, #12]
 80010be:	2a01      	cmp	r2, #1
 80010c0:	d188      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	6921      	ldr	r1, [r4, #16]
 80010c6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80010ca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80010ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d0:	e78a      	b.n	8000fe8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010d2:	68e2      	ldr	r2, [r4, #12]
 80010d4:	4b73      	ldr	r3, [pc, #460]	; (80012a4 <HAL_RCC_OscConfig+0x2d8>)
 80010d6:	b1b2      	cbz	r2, 8001106 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010dc:	f7ff faa2 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e0:	4d6f      	ldr	r5, [pc, #444]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80010e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	682b      	ldr	r3, [r5, #0]
 80010e6:	0798      	lsls	r0, r3, #30
 80010e8:	d507      	bpl.n	80010fa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ea:	682b      	ldr	r3, [r5, #0]
 80010ec:	6922      	ldr	r2, [r4, #16]
 80010ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010f6:	602b      	str	r3, [r5, #0]
 80010f8:	e776      	b.n	8000fe8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fa93 	bl	8000624 <HAL_GetTick>
 80010fe:	1b80      	subs	r0, r0, r6
 8001100:	2802      	cmp	r0, #2
 8001102:	d9ef      	bls.n	80010e4 <HAL_RCC_OscConfig+0x118>
 8001104:	e7a9      	b.n	800105a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001106:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001108:	f7ff fa8c 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110c:	4d64      	ldr	r5, [pc, #400]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800110e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001110:	682b      	ldr	r3, [r5, #0]
 8001112:	0799      	lsls	r1, r3, #30
 8001114:	f57f af68 	bpl.w	8000fe8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001118:	f7ff fa84 	bl	8000624 <HAL_GetTick>
 800111c:	1b80      	subs	r0, r0, r6
 800111e:	2802      	cmp	r0, #2
 8001120:	d9f6      	bls.n	8001110 <HAL_RCC_OscConfig+0x144>
 8001122:	e79a      	b.n	800105a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001124:	6962      	ldr	r2, [r4, #20]
 8001126:	4b60      	ldr	r3, [pc, #384]	; (80012a8 <HAL_RCC_OscConfig+0x2dc>)
 8001128:	b17a      	cbz	r2, 800114a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800112e:	f7ff fa79 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001132:	4d5b      	ldr	r5, [pc, #364]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001134:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001138:	079f      	lsls	r7, r3, #30
 800113a:	f53f af59 	bmi.w	8000ff0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113e:	f7ff fa71 	bl	8000624 <HAL_GetTick>
 8001142:	1b80      	subs	r0, r0, r6
 8001144:	2802      	cmp	r0, #2
 8001146:	d9f6      	bls.n	8001136 <HAL_RCC_OscConfig+0x16a>
 8001148:	e787      	b.n	800105a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800114a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800114c:	f7ff fa6a 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001150:	4d53      	ldr	r5, [pc, #332]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001152:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001154:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001156:	0798      	lsls	r0, r3, #30
 8001158:	f57f af4a 	bpl.w	8000ff0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800115c:	f7ff fa62 	bl	8000624 <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	2802      	cmp	r0, #2
 8001164:	d9f6      	bls.n	8001154 <HAL_RCC_OscConfig+0x188>
 8001166:	e778      	b.n	800105a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001168:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
 800116a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001170:	d128      	bne.n	80011c4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	9201      	str	r2, [sp, #4]
 8001174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001176:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800117a:	641a      	str	r2, [r3, #64]	; 0x40
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001186:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001188:	4d48      	ldr	r5, [pc, #288]	; (80012ac <HAL_RCC_OscConfig+0x2e0>)
 800118a:	682b      	ldr	r3, [r5, #0]
 800118c:	05d9      	lsls	r1, r3, #23
 800118e:	d51b      	bpl.n	80011c8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001190:	68a3      	ldr	r3, [r4, #8]
 8001192:	4d43      	ldr	r5, [pc, #268]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
 8001194:	2b01      	cmp	r3, #1
 8001196:	d127      	bne.n	80011e8 <HAL_RCC_OscConfig+0x21c>
 8001198:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80011a0:	f7ff fa40 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a4:	4d3e      	ldr	r5, [pc, #248]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80011a6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011ae:	079b      	lsls	r3, r3, #30
 80011b0:	d539      	bpl.n	8001226 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80011b2:	2e00      	cmp	r6, #0
 80011b4:	f43f af20 	beq.w	8000ff8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b8:	4a39      	ldr	r2, [pc, #228]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
 80011ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	e719      	b.n	8000ff8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80011c4:	2600      	movs	r6, #0
 80011c6:	e7df      	b.n	8001188 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c8:	682b      	ldr	r3, [r5, #0]
 80011ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80011d0:	f7ff fa28 	bl	8000624 <HAL_GetTick>
 80011d4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	05da      	lsls	r2, r3, #23
 80011da:	d4d9      	bmi.n	8001190 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011dc:	f7ff fa22 	bl	8000624 <HAL_GetTick>
 80011e0:	1bc0      	subs	r0, r0, r7
 80011e2:	2802      	cmp	r0, #2
 80011e4:	d9f7      	bls.n	80011d6 <HAL_RCC_OscConfig+0x20a>
 80011e6:	e738      	b.n	800105a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e8:	2b05      	cmp	r3, #5
 80011ea:	d104      	bne.n	80011f6 <HAL_RCC_OscConfig+0x22a>
 80011ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	672b      	str	r3, [r5, #112]	; 0x70
 80011f4:	e7d0      	b.n	8001198 <HAL_RCC_OscConfig+0x1cc>
 80011f6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011f8:	f022 0201 	bic.w	r2, r2, #1
 80011fc:	672a      	str	r2, [r5, #112]	; 0x70
 80011fe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001200:	f022 0204 	bic.w	r2, r2, #4
 8001204:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1ca      	bne.n	80011a0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800120a:	f7ff fa0b 	bl	8000624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001212:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001214:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001216:	0798      	lsls	r0, r3, #30
 8001218:	d5cb      	bpl.n	80011b2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121a:	f7ff fa03 	bl	8000624 <HAL_GetTick>
 800121e:	1bc0      	subs	r0, r0, r7
 8001220:	4540      	cmp	r0, r8
 8001222:	d9f7      	bls.n	8001214 <HAL_RCC_OscConfig+0x248>
 8001224:	e719      	b.n	800105a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff f9fd 	bl	8000624 <HAL_GetTick>
 800122a:	1bc0      	subs	r0, r0, r7
 800122c:	4540      	cmp	r0, r8
 800122e:	d9bd      	bls.n	80011ac <HAL_RCC_OscConfig+0x1e0>
 8001230:	e713      	b.n	800105a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001232:	4d1b      	ldr	r5, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
 8001234:	68ab      	ldr	r3, [r5, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b08      	cmp	r3, #8
 800123c:	f43f aeca 	beq.w	8000fd4 <HAL_RCC_OscConfig+0x8>
 8001240:	4e1b      	ldr	r6, [pc, #108]	; (80012b0 <HAL_RCC_OscConfig+0x2e4>)
 8001242:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001244:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001246:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001248:	d134      	bne.n	80012b4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800124a:	f7ff f9eb 	bl	8000624 <HAL_GetTick>
 800124e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	0199      	lsls	r1, r3, #6
 8001254:	d41e      	bmi.n	8001294 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001256:	6a22      	ldr	r2, [r4, #32]
 8001258:	69e3      	ldr	r3, [r4, #28]
 800125a:	4313      	orrs	r3, r2
 800125c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800125e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001262:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001264:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001268:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126a:	4c0d      	ldr	r4, [pc, #52]	; (80012a0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800126c:	0852      	lsrs	r2, r2, #1
 800126e:	3a01      	subs	r2, #1
 8001270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001274:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001276:	2301      	movs	r3, #1
 8001278:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800127a:	f7ff f9d3 	bl	8000624 <HAL_GetTick>
 800127e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	019a      	lsls	r2, r3, #6
 8001284:	f53f aebc 	bmi.w	8001000 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001288:	f7ff f9cc 	bl	8000624 <HAL_GetTick>
 800128c:	1b40      	subs	r0, r0, r5
 800128e:	2802      	cmp	r0, #2
 8001290:	d9f6      	bls.n	8001280 <HAL_RCC_OscConfig+0x2b4>
 8001292:	e6e2      	b.n	800105a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001294:	f7ff f9c6 	bl	8000624 <HAL_GetTick>
 8001298:	1bc0      	subs	r0, r0, r7
 800129a:	2802      	cmp	r0, #2
 800129c:	d9d8      	bls.n	8001250 <HAL_RCC_OscConfig+0x284>
 800129e:	e6dc      	b.n	800105a <HAL_RCC_OscConfig+0x8e>
 80012a0:	40023800 	.word	0x40023800
 80012a4:	42470000 	.word	0x42470000
 80012a8:	42470e80 	.word	0x42470e80
 80012ac:	40007000 	.word	0x40007000
 80012b0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80012b4:	f7ff f9b6 	bl	8000624 <HAL_GetTick>
 80012b8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ba:	682b      	ldr	r3, [r5, #0]
 80012bc:	019b      	lsls	r3, r3, #6
 80012be:	f57f ae9f 	bpl.w	8001000 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c2:	f7ff f9af 	bl	8000624 <HAL_GetTick>
 80012c6:	1b00      	subs	r0, r0, r4
 80012c8:	2802      	cmp	r0, #2
 80012ca:	d9f6      	bls.n	80012ba <HAL_RCC_OscConfig+0x2ee>
 80012cc:	e6c5      	b.n	800105a <HAL_RCC_OscConfig+0x8e>
 80012ce:	bf00      	nop

080012d0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012d0:	4913      	ldr	r1, [pc, #76]	; (8001320 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80012d2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012d4:	688b      	ldr	r3, [r1, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d003      	beq.n	80012e6 <HAL_RCC_GetSysClockFreq+0x16>
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d003      	beq.n	80012ea <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012e2:	4810      	ldr	r0, [pc, #64]	; (8001324 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012e4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80012e6:	4810      	ldr	r0, [pc, #64]	; (8001328 <HAL_RCC_GetSysClockFreq+0x58>)
 80012e8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012ea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012ec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012f0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f4:	bf14      	ite	ne
 80012f6:	480c      	ldrne	r0, [pc, #48]	; (8001328 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f8:	480a      	ldreq	r0, [pc, #40]	; (8001324 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012fa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80012fe:	bf18      	it	ne
 8001300:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001302:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001306:	fba1 0100 	umull	r0, r1, r1, r0
 800130a:	f7fe ffb9 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_RCC_GetSysClockFreq+0x50>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001316:	3301      	adds	r3, #1
 8001318:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800131a:	fbb0 f0f3 	udiv	r0, r0, r3
 800131e:	bd08      	pop	{r3, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	00f42400 	.word	0x00f42400
 8001328:	007a1200 	.word	0x007a1200

0800132c <HAL_RCC_ClockConfig>:
{
 800132c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001330:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001332:	4604      	mov	r4, r0
 8001334:	b910      	cbnz	r0, 800133c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001336:	2001      	movs	r0, #1
 8001338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800133c:	4b44      	ldr	r3, [pc, #272]	; (8001450 <HAL_RCC_ClockConfig+0x124>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	f002 020f 	and.w	r2, r2, #15
 8001344:	428a      	cmp	r2, r1
 8001346:	d328      	bcc.n	800139a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001348:	6821      	ldr	r1, [r4, #0]
 800134a:	078f      	lsls	r7, r1, #30
 800134c:	d42d      	bmi.n	80013aa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134e:	07c8      	lsls	r0, r1, #31
 8001350:	d440      	bmi.n	80013d4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001352:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <HAL_RCC_ClockConfig+0x124>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	f002 020f 	and.w	r2, r2, #15
 800135a:	4295      	cmp	r5, r2
 800135c:	d366      	bcc.n	800142c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135e:	6822      	ldr	r2, [r4, #0]
 8001360:	0751      	lsls	r1, r2, #29
 8001362:	d46c      	bmi.n	800143e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001364:	0713      	lsls	r3, r2, #28
 8001366:	d507      	bpl.n	8001378 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001368:	4a3a      	ldr	r2, [pc, #232]	; (8001454 <HAL_RCC_ClockConfig+0x128>)
 800136a:	6921      	ldr	r1, [r4, #16]
 800136c:	6893      	ldr	r3, [r2, #8]
 800136e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001372:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001376:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001378:	f7ff ffaa 	bl	80012d0 <HAL_RCC_GetSysClockFreq>
 800137c:	4b35      	ldr	r3, [pc, #212]	; (8001454 <HAL_RCC_ClockConfig+0x128>)
 800137e:	4a36      	ldr	r2, [pc, #216]	; (8001458 <HAL_RCC_ClockConfig+0x12c>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	40d8      	lsrs	r0, r3
 800138a:	4b34      	ldr	r3, [pc, #208]	; (800145c <HAL_RCC_ClockConfig+0x130>)
 800138c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff f8fe 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8001394:	2000      	movs	r0, #0
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	b2ca      	uxtb	r2, r1
 800139c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	4299      	cmp	r1, r3
 80013a6:	d1c6      	bne.n	8001336 <HAL_RCC_ClockConfig+0xa>
 80013a8:	e7ce      	b.n	8001348 <HAL_RCC_ClockConfig+0x1c>
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ac:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b0:	bf1e      	ittt	ne
 80013b2:	689a      	ldrne	r2, [r3, #8]
 80013b4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80013b8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ba:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013bc:	bf42      	ittt	mi
 80013be:	689a      	ldrmi	r2, [r3, #8]
 80013c0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80013c4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	68a0      	ldr	r0, [r4, #8]
 80013ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80013ce:	4302      	orrs	r2, r0
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	e7bc      	b.n	800134e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d4:	6862      	ldr	r2, [r4, #4]
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_RCC_ClockConfig+0x128>)
 80013d8:	2a01      	cmp	r2, #1
 80013da:	d11d      	bne.n	8001418 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e2:	d0a8      	beq.n	8001336 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e4:	4e1b      	ldr	r6, [pc, #108]	; (8001454 <HAL_RCC_ClockConfig+0x128>)
 80013e6:	68b3      	ldr	r3, [r6, #8]
 80013e8:	f023 0303 	bic.w	r3, r3, #3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80013f0:	f7ff f918 	bl	8000624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80013f8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fa:	68b3      	ldr	r3, [r6, #8]
 80013fc:	6862      	ldr	r2, [r4, #4]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001406:	d0a4      	beq.n	8001352 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001408:	f7ff f90c 	bl	8000624 <HAL_GetTick>
 800140c:	1bc0      	subs	r0, r0, r7
 800140e:	4540      	cmp	r0, r8
 8001410:	d9f3      	bls.n	80013fa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001412:	2003      	movs	r0, #3
}
 8001414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001418:	1e91      	subs	r1, r2, #2
 800141a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800141e:	d802      	bhi.n	8001426 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001420:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001424:	e7dd      	b.n	80013e2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001426:	f013 0f02 	tst.w	r3, #2
 800142a:	e7da      	b.n	80013e2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142c:	b2ea      	uxtb	r2, r5
 800142e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	429d      	cmp	r5, r3
 8001438:	f47f af7d 	bne.w	8001336 <HAL_RCC_ClockConfig+0xa>
 800143c:	e78f      	b.n	800135e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800143e:	4905      	ldr	r1, [pc, #20]	; (8001454 <HAL_RCC_ClockConfig+0x128>)
 8001440:	68e0      	ldr	r0, [r4, #12]
 8001442:	688b      	ldr	r3, [r1, #8]
 8001444:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001448:	4303      	orrs	r3, r0
 800144a:	608b      	str	r3, [r1, #8]
 800144c:	e78a      	b.n	8001364 <HAL_RCC_ClockConfig+0x38>
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00
 8001454:	40023800 	.word	0x40023800
 8001458:	08002e1b 	.word	0x08002e1b
 800145c:	20000008 	.word	0x20000008

08001460 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800146a:	5cd3      	ldrb	r3, [r2, r3]
 800146c:	4a03      	ldr	r2, [pc, #12]	; (800147c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800146e:	6810      	ldr	r0, [r2, #0]
}
 8001470:	40d8      	lsrs	r0, r3
 8001472:	4770      	bx	lr
 8001474:	40023800 	.word	0x40023800
 8001478:	08002e2b 	.word	0x08002e2b
 800147c:	20000008 	.word	0x20000008

08001480 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800148a:	5cd3      	ldrb	r3, [r2, r3]
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800148e:	6810      	ldr	r0, [r2, #0]
}
 8001490:	40d8      	lsrs	r0, r3
 8001492:	4770      	bx	lr
 8001494:	40023800 	.word	0x40023800
 8001498:	08002e2b 	.word	0x08002e2b
 800149c:	20000008 	.word	0x20000008

080014a0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014a0:	6a03      	ldr	r3, [r0, #32]
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014a8:	6a03      	ldr	r3, [r0, #32]
{
 80014aa:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80014ac:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80014ae:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80014b2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80014b6:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80014b8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80014ba:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80014be:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80014c0:	4d0a      	ldr	r5, [pc, #40]	; (80014ec <TIM_OC1_SetConfig+0x4c>)
 80014c2:	42a8      	cmp	r0, r5
 80014c4:	d10b      	bne.n	80014de <TIM_OC1_SetConfig+0x3e>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80014c6:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80014c8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80014ca:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80014ce:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80014d0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80014d2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80014d6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80014d8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80014dc:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014de:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80014e0:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80014e2:	684a      	ldr	r2, [r1, #4]
 80014e4:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80014e6:	6203      	str	r3, [r0, #32]
 80014e8:	bd70      	pop	{r4, r5, r6, pc}
 80014ea:	bf00      	nop
 80014ec:	40010000 	.word	0x40010000

080014f0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80014f0:	6a03      	ldr	r3, [r0, #32]
 80014f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014f6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014f8:	6a03      	ldr	r3, [r0, #32]
{
 80014fa:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80014fc:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80014fe:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001500:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001502:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001506:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001508:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800150a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800150e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001512:	4d0b      	ldr	r5, [pc, #44]	; (8001540 <TIM_OC3_SetConfig+0x50>)
 8001514:	42a8      	cmp	r0, r5
 8001516:	d10d      	bne.n	8001534 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001518:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800151a:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 800151c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001520:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001524:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001526:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800152a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800152c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001530:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001534:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001536:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001538:	684a      	ldr	r2, [r1, #4]
 800153a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800153c:	6203      	str	r3, [r0, #32]
 800153e:	bd70      	pop	{r4, r5, r6, pc}
 8001540:	40010000 	.word	0x40010000

08001544 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001544:	6a03      	ldr	r3, [r0, #32]
 8001546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800154a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800154c:	6a03      	ldr	r3, [r0, #32]
{
 800154e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001550:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001552:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001554:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001556:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800155a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800155e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001564:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001568:	4d06      	ldr	r5, [pc, #24]	; (8001584 <TIM_OC4_SetConfig+0x40>)
 800156a:	42a8      	cmp	r0, r5
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800156c:	bf02      	ittt	eq
 800156e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001570:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001574:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001578:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800157a:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800157c:	684a      	ldr	r2, [r1, #4]
 800157e:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001580:	6203      	str	r3, [r0, #32]
 8001582:	bd30      	pop	{r4, r5, pc}
 8001584:	40010000 	.word	0x40010000

08001588 <HAL_TIM_PWM_MspInit>:
 8001588:	4770      	bx	lr

0800158a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800158a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800158e:	2b01      	cmp	r3, #1
{
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001596:	d01c      	beq.n	80015d2 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001598:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800159c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800159e:	2201      	movs	r2, #1
 80015a0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 80015a4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015a6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80015aa:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80015ae:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80015b0:	680a      	ldr	r2, [r1, #0]
 80015b2:	2a40      	cmp	r2, #64	; 0x40
 80015b4:	d079      	beq.n	80016aa <HAL_TIM_ConfigClockSource+0x120>
 80015b6:	d819      	bhi.n	80015ec <HAL_TIM_ConfigClockSource+0x62>
 80015b8:	2a10      	cmp	r2, #16
 80015ba:	f000 8093 	beq.w	80016e4 <HAL_TIM_ConfigClockSource+0x15a>
 80015be:	d80a      	bhi.n	80015d6 <HAL_TIM_ConfigClockSource+0x4c>
 80015c0:	2a00      	cmp	r2, #0
 80015c2:	f000 8089 	beq.w	80016d8 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80015cc:	2300      	movs	r3, #0
 80015ce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80015d2:	4618      	mov	r0, r3
}
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80015d6:	2a20      	cmp	r2, #32
 80015d8:	f000 808a 	beq.w	80016f0 <HAL_TIM_ConfigClockSource+0x166>
 80015dc:	2a30      	cmp	r2, #48	; 0x30
 80015de:	d1f2      	bne.n	80015c6 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80015e0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80015e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015e6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80015ea:	e036      	b.n	800165a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80015ec:	2a70      	cmp	r2, #112	; 0x70
 80015ee:	d036      	beq.n	800165e <HAL_TIM_ConfigClockSource+0xd4>
 80015f0:	d81b      	bhi.n	800162a <HAL_TIM_ConfigClockSource+0xa0>
 80015f2:	2a50      	cmp	r2, #80	; 0x50
 80015f4:	d042      	beq.n	800167c <HAL_TIM_ConfigClockSource+0xf2>
 80015f6:	2a60      	cmp	r2, #96	; 0x60
 80015f8:	d1e5      	bne.n	80015c6 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015fa:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80015fc:	684d      	ldr	r5, [r1, #4]
 80015fe:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001600:	f024 0410 	bic.w	r4, r4, #16
 8001604:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001606:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001608:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800160a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800160e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001612:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001616:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800161a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800161c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800161e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001620:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001624:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001628:	e017      	b.n	800165a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800162a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800162e:	d011      	beq.n	8001654 <HAL_TIM_ConfigClockSource+0xca>
 8001630:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001634:	d1c7      	bne.n	80015c6 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001636:	688a      	ldr	r2, [r1, #8]
 8001638:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800163a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800163c:	68c9      	ldr	r1, [r1, #12]
 800163e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001640:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001644:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001648:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800164a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001652:	e002      	b.n	800165a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	e7b3      	b.n	80015c6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800165e:	688a      	ldr	r2, [r1, #8]
 8001660:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001662:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001664:	68c9      	ldr	r1, [r1, #12]
 8001666:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001668:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800166c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001670:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001672:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001674:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001676:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800167a:	e7ee      	b.n	800165a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800167c:	684c      	ldr	r4, [r1, #4]
 800167e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001680:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001682:	6a1d      	ldr	r5, [r3, #32]
 8001684:	f025 0501 	bic.w	r5, r5, #1
 8001688:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800168a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800168c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001690:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001694:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001698:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800169a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800169c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800169e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016a4:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80016a8:	e7d7      	b.n	800165a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80016aa:	684c      	ldr	r4, [r1, #4]
 80016ac:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80016ae:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016b0:	6a1d      	ldr	r5, [r3, #32]
 80016b2:	f025 0501 	bic.w	r5, r5, #1
 80016b6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80016b8:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80016ba:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016c2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80016c6:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80016c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80016ca:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80016cc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016d2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80016d6:	e7c0      	b.n	800165a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80016d8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016de:	f042 0207 	orr.w	r2, r2, #7
 80016e2:	e7ba      	b.n	800165a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80016e4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016ea:	f042 0217 	orr.w	r2, r2, #23
 80016ee:	e7b4      	b.n	800165a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80016f0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016f6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80016fa:	e7ae      	b.n	800165a <HAL_TIM_ConfigClockSource+0xd0>

080016fc <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80016fc:	4a22      	ldr	r2, [pc, #136]	; (8001788 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 80016fe:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001700:	4290      	cmp	r0, r2
 8001702:	d00e      	beq.n	8001722 <TIM_Base_SetConfig+0x26>
 8001704:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001708:	d00b      	beq.n	8001722 <TIM_Base_SetConfig+0x26>
 800170a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800170e:	4290      	cmp	r0, r2
 8001710:	d007      	beq.n	8001722 <TIM_Base_SetConfig+0x26>
 8001712:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001716:	4290      	cmp	r0, r2
 8001718:	d003      	beq.n	8001722 <TIM_Base_SetConfig+0x26>
 800171a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800171e:	4290      	cmp	r0, r2
 8001720:	d119      	bne.n	8001756 <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8001722:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001728:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800172a:	4a17      	ldr	r2, [pc, #92]	; (8001788 <TIM_Base_SetConfig+0x8c>)
 800172c:	4290      	cmp	r0, r2
 800172e:	d104      	bne.n	800173a <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001730:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001736:	4313      	orrs	r3, r2
 8001738:	e018      	b.n	800176c <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800173a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800173e:	d0f7      	beq.n	8001730 <TIM_Base_SetConfig+0x34>
 8001740:	4a12      	ldr	r2, [pc, #72]	; (800178c <TIM_Base_SetConfig+0x90>)
 8001742:	4290      	cmp	r0, r2
 8001744:	d0f4      	beq.n	8001730 <TIM_Base_SetConfig+0x34>
 8001746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800174a:	4290      	cmp	r0, r2
 800174c:	d0f0      	beq.n	8001730 <TIM_Base_SetConfig+0x34>
 800174e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001752:	4290      	cmp	r0, r2
 8001754:	d0ec      	beq.n	8001730 <TIM_Base_SetConfig+0x34>
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <TIM_Base_SetConfig+0x94>)
 8001758:	4290      	cmp	r0, r2
 800175a:	d0e9      	beq.n	8001730 <TIM_Base_SetConfig+0x34>
 800175c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001760:	4290      	cmp	r0, r2
 8001762:	d0e5      	beq.n	8001730 <TIM_Base_SetConfig+0x34>
 8001764:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001768:	4290      	cmp	r0, r2
 800176a:	d0e1      	beq.n	8001730 <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 800176c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800176e:	688b      	ldr	r3, [r1, #8]
 8001770:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001772:	680b      	ldr	r3, [r1, #0]
 8001774:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <TIM_Base_SetConfig+0x8c>)
 8001778:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800177a:	bf04      	itt	eq
 800177c:	690b      	ldreq	r3, [r1, #16]
 800177e:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001780:	2301      	movs	r3, #1
 8001782:	6143      	str	r3, [r0, #20]
}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40010000 	.word	0x40010000
 800178c:	40000400 	.word	0x40000400
 8001790:	40014000 	.word	0x40014000

08001794 <HAL_TIM_Base_Init>:
{ 
 8001794:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001796:	4604      	mov	r4, r0
 8001798:	b1a0      	cbz	r0, 80017c4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800179a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800179e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017a2:	b91b      	cbnz	r3, 80017ac <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80017a8:	f000 fdbe 	bl	8002328 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80017ac:	2302      	movs	r3, #2
 80017ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80017b2:	6820      	ldr	r0, [r4, #0]
 80017b4:	1d21      	adds	r1, r4, #4
 80017b6:	f7ff ffa1 	bl	80016fc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80017c0:	2000      	movs	r0, #0
 80017c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017c4:	2001      	movs	r0, #1
}
 80017c6:	bd10      	pop	{r4, pc}

080017c8 <HAL_TIM_PWM_Init>:
{
 80017c8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80017ca:	4604      	mov	r4, r0
 80017cc:	b1a0      	cbz	r0, 80017f8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80017ce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017d6:	b91b      	cbnz	r3, 80017e0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017d8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80017dc:	f7ff fed4 	bl	8001588 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80017e0:	2302      	movs	r3, #2
 80017e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80017e6:	6820      	ldr	r0, [r4, #0]
 80017e8:	1d21      	adds	r1, r4, #4
 80017ea:	f7ff ff87 	bl	80016fc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80017f4:	2000      	movs	r0, #0
 80017f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017f8:	2001      	movs	r0, #1
}  
 80017fa:	bd10      	pop	{r4, pc}

080017fc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017fc:	6a03      	ldr	r3, [r0, #32]
 80017fe:	f023 0310 	bic.w	r3, r3, #16
 8001802:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001804:	6a03      	ldr	r3, [r0, #32]
{
 8001806:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 8001808:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800180a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800180c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800180e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001812:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001816:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001818:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800181c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001820:	4d0b      	ldr	r5, [pc, #44]	; (8001850 <TIM_OC2_SetConfig+0x54>)
 8001822:	42a8      	cmp	r0, r5
 8001824:	d10d      	bne.n	8001842 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001826:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001828:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800182a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800182e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001832:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001834:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001838:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800183a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800183e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001842:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001844:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001846:	684a      	ldr	r2, [r1, #4]
 8001848:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800184a:	6203      	str	r3, [r0, #32]
 800184c:	bd70      	pop	{r4, r5, r6, pc}
 800184e:	bf00      	nop
 8001850:	40010000 	.word	0x40010000

08001854 <HAL_TIM_PWM_ConfigChannel>:
{
 8001854:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001856:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800185a:	2b01      	cmp	r3, #1
{
 800185c:	4604      	mov	r4, r0
 800185e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001862:	d025      	beq.n	80018b0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001864:	2301      	movs	r3, #1
 8001866:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800186a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800186e:	2a0c      	cmp	r2, #12
 8001870:	d818      	bhi.n	80018a4 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001872:	e8df f002 	tbb	[pc, r2]
 8001876:	1707      	.short	0x1707
 8001878:	171e1717 	.word	0x171e1717
 800187c:	172f1717 	.word	0x172f1717
 8001880:	1717      	.short	0x1717
 8001882:	40          	.byte	0x40
 8001883:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001884:	6820      	ldr	r0, [r4, #0]
 8001886:	f7ff fe0b 	bl	80014a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800188a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800188c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	f042 0208 	orr.w	r2, r2, #8
 8001894:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001896:	699a      	ldr	r2, [r3, #24]
 8001898:	f022 0204 	bic.w	r2, r2, #4
 800189c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800189e:	699a      	ldr	r2, [r3, #24]
 80018a0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018a2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80018a4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80018a6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80018a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80018ac:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80018b0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	f7ff ffa2 	bl	80017fc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018b8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018ba:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018d2:	e7e6      	b.n	80018a2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018d4:	6820      	ldr	r0, [r4, #0]
 80018d6:	f7ff fe0b 	bl	80014f0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018da:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80018dc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018de:	69da      	ldr	r2, [r3, #28]
 80018e0:	f042 0208 	orr.w	r2, r2, #8
 80018e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80018e6:	69da      	ldr	r2, [r3, #28]
 80018e8:	f022 0204 	bic.w	r2, r2, #4
 80018ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80018ee:	69da      	ldr	r2, [r3, #28]
 80018f0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80018f2:	61da      	str	r2, [r3, #28]
    break;
 80018f4:	e7d6      	b.n	80018a4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018f6:	6820      	ldr	r0, [r4, #0]
 80018f8:	f7ff fe24 	bl	8001544 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80018fe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001900:	69da      	ldr	r2, [r3, #28]
 8001902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001906:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001908:	69da      	ldr	r2, [r3, #28]
 800190a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800190e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001910:	69da      	ldr	r2, [r3, #28]
 8001912:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001916:	e7ec      	b.n	80018f2 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001918 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001918:	6a03      	ldr	r3, [r0, #32]
{
 800191a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 800191c:	2401      	movs	r4, #1
 800191e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001920:	ea23 0304 	bic.w	r3, r3, r4
 8001924:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001926:	6a03      	ldr	r3, [r0, #32]
 8001928:	408a      	lsls	r2, r1
 800192a:	431a      	orrs	r2, r3
 800192c:	6202      	str	r2, [r0, #32]
 800192e:	bd10      	pop	{r4, pc}

08001930 <HAL_TIM_PWM_Start>:
{
 8001930:	b510      	push	{r4, lr}
 8001932:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001934:	2201      	movs	r2, #1
 8001936:	6800      	ldr	r0, [r0, #0]
 8001938:	f7ff ffee 	bl	8001918 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	4a06      	ldr	r2, [pc, #24]	; (8001958 <HAL_TIM_PWM_Start+0x28>)
 8001940:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001942:	bf02      	ittt	eq
 8001944:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001946:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 800194a:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]
} 
 8001954:	2000      	movs	r0, #0
 8001956:	bd10      	pop	{r4, pc}
 8001958:	40010000 	.word	0x40010000

0800195c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800195c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001960:	2b01      	cmp	r3, #1
{
 8001962:	b510      	push	{r4, lr}
 8001964:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001968:	d018      	beq.n	800199c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800196a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800196e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001970:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001972:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001974:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001976:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800197a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4322      	orrs	r2, r4
 8001980:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001988:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	430a      	orrs	r2, r1
 800198e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001990:	2301      	movs	r3, #1
 8001992:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001996:	2300      	movs	r3, #0
 8001998:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800199c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800199e:	bd10      	pop	{r4, pc}

080019a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80019a0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d01f      	beq.n	80019e8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80019a8:	68cb      	ldr	r3, [r1, #12]
 80019aa:	688a      	ldr	r2, [r1, #8]
 80019ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80019b2:	684a      	ldr	r2, [r1, #4]
 80019b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80019ba:	680a      	ldr	r2, [r1, #0]
 80019bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80019c2:	690a      	ldr	r2, [r1, #16]
 80019c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80019ca:	694a      	ldr	r2, [r1, #20]
 80019cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80019d2:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80019d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019d8:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80019da:	6802      	ldr	r2, [r0, #0]
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80019de:	2300      	movs	r3, #0
 80019e0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80019e4:	4618      	mov	r0, r3
 80019e6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80019e8:	2002      	movs	r0, #2
}
 80019ea:	4770      	bx	lr

080019ec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019ec:	6803      	ldr	r3, [r0, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80019f4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	f022 0201 	bic.w	r2, r2, #1
 80019fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019fe:	2320      	movs	r3, #32
 8001a00:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001a04:	4770      	bx	lr
	...

08001a08 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001a0c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001a0e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001a10:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a12:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001a14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001a18:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001a1a:	6133      	str	r3, [r6, #16]
{
 8001a1c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a1e:	6883      	ldr	r3, [r0, #8]
 8001a20:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001a22:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a24:	4303      	orrs	r3, r0
 8001a26:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001a28:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a2c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001a2e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a32:	430b      	orrs	r3, r1
 8001a34:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001a36:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001a38:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001a3a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001a40:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a42:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001a46:	6173      	str	r3, [r6, #20]
 8001a48:	4b7a      	ldr	r3, [pc, #488]	; (8001c34 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a4a:	d17c      	bne.n	8001b46 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a4c:	429e      	cmp	r6, r3
 8001a4e:	d003      	beq.n	8001a58 <UART_SetConfig+0x50>
 8001a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a54:	429e      	cmp	r6, r3
 8001a56:	d144      	bne.n	8001ae2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001a58:	f7ff fd12 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8001a5c:	2519      	movs	r5, #25
 8001a5e:	fb05 f300 	mul.w	r3, r5, r0
 8001a62:	6860      	ldr	r0, [r4, #4]
 8001a64:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a68:	0040      	lsls	r0, r0, #1
 8001a6a:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a6e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001a76:	f7ff fd03 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8001a7a:	6863      	ldr	r3, [r4, #4]
 8001a7c:	4368      	muls	r0, r5
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a84:	f7ff fcfc 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8001a88:	6863      	ldr	r3, [r4, #4]
 8001a8a:	4368      	muls	r0, r5
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a92:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a96:	fb09 7313 	mls	r3, r9, r3, r7
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	3332      	adds	r3, #50	; 0x32
 8001a9e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001aa8:	f7ff fcea 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8001aac:	6862      	ldr	r2, [r4, #4]
 8001aae:	4368      	muls	r0, r5
 8001ab0:	0052      	lsls	r2, r2, #1
 8001ab2:	fbb0 faf2 	udiv	sl, r0, r2
 8001ab6:	f7ff fce3 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001aba:	6863      	ldr	r3, [r4, #4]
 8001abc:	4368      	muls	r0, r5
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ac8:	fb09 a313 	mls	r3, r9, r3, sl
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	3332      	adds	r3, #50	; 0x32
 8001ad0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ada:	443b      	add	r3, r7
 8001adc:	60b3      	str	r3, [r6, #8]
 8001ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ae2:	f7ff fcbd 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 8001ae6:	2519      	movs	r5, #25
 8001ae8:	fb05 f300 	mul.w	r3, r5, r0
 8001aec:	6860      	ldr	r0, [r4, #4]
 8001aee:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001af2:	0040      	lsls	r0, r0, #1
 8001af4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001af8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001afc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001b00:	f7ff fcae 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 8001b04:	6863      	ldr	r3, [r4, #4]
 8001b06:	4368      	muls	r0, r5
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fbb0 f7f3 	udiv	r7, r0, r3
 8001b0e:	f7ff fca7 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 8001b12:	6863      	ldr	r3, [r4, #4]
 8001b14:	4368      	muls	r0, r5
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b20:	fb09 7313 	mls	r3, r9, r3, r7
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	3332      	adds	r3, #50	; 0x32
 8001b28:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001b32:	f7ff fc95 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 8001b36:	6862      	ldr	r2, [r4, #4]
 8001b38:	4368      	muls	r0, r5
 8001b3a:	0052      	lsls	r2, r2, #1
 8001b3c:	fbb0 faf2 	udiv	sl, r0, r2
 8001b40:	f7ff fc8e 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 8001b44:	e7b9      	b.n	8001aba <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b46:	429e      	cmp	r6, r3
 8001b48:	d002      	beq.n	8001b50 <UART_SetConfig+0x148>
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <UART_SetConfig+0x230>)
 8001b4c:	429e      	cmp	r6, r3
 8001b4e:	d140      	bne.n	8001bd2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b50:	f7ff fc96 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8001b54:	6867      	ldr	r7, [r4, #4]
 8001b56:	2519      	movs	r5, #25
 8001b58:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b5c:	fb05 f300 	mul.w	r3, r5, r0
 8001b60:	00bf      	lsls	r7, r7, #2
 8001b62:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b66:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b6a:	011f      	lsls	r7, r3, #4
 8001b6c:	f7ff fc88 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8001b70:	6863      	ldr	r3, [r4, #4]
 8001b72:	4368      	muls	r0, r5
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	fbb0 f8f3 	udiv	r8, r0, r3
 8001b7a:	f7ff fc81 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8001b7e:	6863      	ldr	r3, [r4, #4]
 8001b80:	4368      	muls	r0, r5
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b88:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b8c:	fb09 8313 	mls	r3, r9, r3, r8
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	3332      	adds	r3, #50	; 0x32
 8001b94:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b98:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001b9c:	f7ff fc70 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8001ba0:	6862      	ldr	r2, [r4, #4]
 8001ba2:	4368      	muls	r0, r5
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	fbb0 faf2 	udiv	sl, r0, r2
 8001baa:	f7ff fc69 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bae:	6863      	ldr	r3, [r4, #4]
 8001bb0:	4368      	muls	r0, r5
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bbc:	fb09 a313 	mls	r3, r9, r3, sl
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	3332      	adds	r3, #50	; 0x32
 8001bc4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	ea43 0308 	orr.w	r3, r3, r8
 8001bd0:	e783      	b.n	8001ada <UART_SetConfig+0xd2>
 8001bd2:	f7ff fc45 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 8001bd6:	6867      	ldr	r7, [r4, #4]
 8001bd8:	2519      	movs	r5, #25
 8001bda:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001bde:	fb05 f300 	mul.w	r3, r5, r0
 8001be2:	00bf      	lsls	r7, r7, #2
 8001be4:	fbb3 f3f7 	udiv	r3, r3, r7
 8001be8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bec:	011f      	lsls	r7, r3, #4
 8001bee:	f7ff fc37 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 8001bf2:	6863      	ldr	r3, [r4, #4]
 8001bf4:	4368      	muls	r0, r5
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	fbb0 f8f3 	udiv	r8, r0, r3
 8001bfc:	f7ff fc30 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 8001c00:	6863      	ldr	r3, [r4, #4]
 8001c02:	4368      	muls	r0, r5
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c0a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c0e:	fb09 8313 	mls	r3, r9, r3, r8
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	3332      	adds	r3, #50	; 0x32
 8001c16:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c1a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001c1e:	f7ff fc1f 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 8001c22:	6862      	ldr	r2, [r4, #4]
 8001c24:	4368      	muls	r0, r5
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	fbb0 faf2 	udiv	sl, r0, r2
 8001c2c:	f7ff fc18 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 8001c30:	e7bd      	b.n	8001bae <UART_SetConfig+0x1a6>
 8001c32:	bf00      	nop
 8001c34:	40011000 	.word	0x40011000
 8001c38:	40011400 	.word	0x40011400

08001c3c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3e:	4604      	mov	r4, r0
 8001c40:	460e      	mov	r6, r1
 8001c42:	4617      	mov	r7, r2
 8001c44:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c46:	6821      	ldr	r1, [r4, #0]
 8001c48:	680b      	ldr	r3, [r1, #0]
 8001c4a:	ea36 0303 	bics.w	r3, r6, r3
 8001c4e:	d101      	bne.n	8001c54 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001c50:	2000      	movs	r0, #0
}
 8001c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001c54:	1c6b      	adds	r3, r5, #1
 8001c56:	d0f7      	beq.n	8001c48 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c58:	b995      	cbnz	r5, 8001c80 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c62:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c72:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001c76:	2300      	movs	r3, #0
 8001c78:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c80:	f7fe fcd0 	bl	8000624 <HAL_GetTick>
 8001c84:	1bc0      	subs	r0, r0, r7
 8001c86:	4285      	cmp	r5, r0
 8001c88:	d2dd      	bcs.n	8001c46 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001c8a:	e7e6      	b.n	8001c5a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001c8c <HAL_UART_Init>:
{
 8001c8c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001c8e:	4604      	mov	r4, r0
 8001c90:	b340      	cbz	r0, 8001ce4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c92:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c9a:	b91b      	cbnz	r3, 8001ca4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001c9c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ca0:	f000 fb86 	bl	80023b0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001ca4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ca6:	2324      	movs	r3, #36	; 0x24
 8001ca8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001cac:	68d3      	ldr	r3, [r2, #12]
 8001cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cb2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff fea7 	bl	8001a08 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cc2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cca:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cd2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001cd6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001cda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001cde:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001ce2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ce4:	2001      	movs	r0, #1
}
 8001ce6:	bd10      	pop	{r4, pc}

08001ce8 <HAL_UART_Transmit>:
{
 8001ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cec:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001cee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001cf2:	2b20      	cmp	r3, #32
{
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	460d      	mov	r5, r1
 8001cf8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8001cfa:	d14f      	bne.n	8001d9c <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001cfc:	2900      	cmp	r1, #0
 8001cfe:	d04a      	beq.n	8001d96 <HAL_UART_Transmit+0xae>
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	d048      	beq.n	8001d96 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001d04:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d047      	beq.n	8001d9c <HAL_UART_Transmit+0xb4>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d16:	2321      	movs	r3, #33	; 0x21
 8001d18:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001d1c:	f7fe fc82 	bl	8000624 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001d20:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001d24:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001d26:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001d2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b96b      	cbnz	r3, 8001d4c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d30:	463b      	mov	r3, r7
 8001d32:	4632      	mov	r2, r6
 8001d34:	2140      	movs	r1, #64	; 0x40
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff ff80 	bl	8001c3c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d3c:	b9b0      	cbnz	r0, 8001d6c <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001d44:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001d4c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d54:	68a3      	ldr	r3, [r4, #8]
 8001d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d5a:	4632      	mov	r2, r6
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001d62:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d64:	d10e      	bne.n	8001d84 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d66:	f7ff ff69 	bl	8001c3c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d6a:	b110      	cbz	r0, 8001d72 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d72:	882b      	ldrh	r3, [r5, #0]
 8001d74:	6822      	ldr	r2, [r4, #0]
 8001d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d7a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001d7c:	6923      	ldr	r3, [r4, #16]
 8001d7e:	b943      	cbnz	r3, 8001d92 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001d80:	3502      	adds	r5, #2
 8001d82:	e7d2      	b.n	8001d2a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d84:	f7ff ff5a 	bl	8001c3c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	d1ef      	bne.n	8001d6c <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	782a      	ldrb	r2, [r5, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	3501      	adds	r5, #1
 8001d94:	e7c9      	b.n	8001d2a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001d96:	2001      	movs	r0, #1
 8001d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001d9c:	2002      	movs	r0, #2
}
 8001d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001da4 <HAL_UART_Receive_DMA>:
{  
 8001da4:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001da6:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8001daa:	2a20      	cmp	r2, #32
{  
 8001dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dae:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001db0:	d138      	bne.n	8001e24 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL ) || (Size == 0)) 
 8001db2:	2900      	cmp	r1, #0
 8001db4:	d034      	beq.n	8001e20 <HAL_UART_Receive_DMA+0x7c>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d032      	beq.n	8001e20 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8001dba:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8001dbe:	2a01      	cmp	r2, #1
 8001dc0:	d030      	beq.n	8001e24 <HAL_UART_Receive_DMA+0x80>
 8001dc2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc4:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8001dc6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dca:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dcc:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 8001dce:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8001dd0:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dd2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001dd6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001dd8:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <HAL_UART_Receive_DMA+0x84>)
 8001dda:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001ddc:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001dde:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <HAL_UART_Receive_DMA+0x88>)
 8001de0:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001de2:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <HAL_UART_Receive_DMA+0x8c>)
 8001de4:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8001de6:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001de8:	460a      	mov	r2, r1
 8001dea:	1d31      	adds	r1, r6, #4
 8001dec:	f7fe ff1a 	bl	8000c24 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001df0:	682b      	ldr	r3, [r5, #0]
 8001df2:	9401      	str	r4, [sp, #4]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	9201      	str	r2, [sp, #4]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	9201      	str	r2, [sp, #4]
 8001dfc:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001dfe:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 8001e00:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e08:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
 8001e10:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e18:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8001e1a:	4620      	mov	r0, r4
}
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001e20:	2001      	movs	r0, #1
 8001e22:	e7fb      	b.n	8001e1c <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY; 
 8001e24:	2002      	movs	r0, #2
 8001e26:	e7f9      	b.n	8001e1c <HAL_UART_Receive_DMA+0x78>
 8001e28:	08001e37 	.word	0x08001e37
 8001e2c:	08001e71 	.word	0x08001e71
 8001e30:	08001e7d 	.word	0x08001e7d

08001e34 <HAL_UART_RxCpltCallback>:
 8001e34:	4770      	bx	lr

08001e36 <UART_DMAReceiveCplt>:
{
 8001e36:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001e38:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e3a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001e42:	d110      	bne.n	8001e66 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8001e44:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e46:	6813      	ldr	r3, [r2, #0]
 8001e48:	68d9      	ldr	r1, [r3, #12]
 8001e4a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001e4e:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e50:	6959      	ldr	r1, [r3, #20]
 8001e52:	f021 0101 	bic.w	r1, r1, #1
 8001e56:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e58:	6959      	ldr	r1, [r3, #20]
 8001e5a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001e5e:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001e60:	2320      	movs	r3, #32
 8001e62:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001e66:	4610      	mov	r0, r2
 8001e68:	f7ff ffe4 	bl	8001e34 <HAL_UART_RxCpltCallback>
 8001e6c:	bd08      	pop	{r3, pc}

08001e6e <HAL_UART_RxHalfCpltCallback>:
 8001e6e:	4770      	bx	lr

08001e70 <UART_DMARxHalfCplt>:
{
 8001e70:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8001e72:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001e74:	f7ff fffb 	bl	8001e6e <HAL_UART_RxHalfCpltCallback>
 8001e78:	bd08      	pop	{r3, pc}

08001e7a <HAL_UART_ErrorCallback>:
 8001e7a:	4770      	bx	lr

08001e7c <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e7c:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8001e7e:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001e80:	680b      	ldr	r3, [r1, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e84:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8001e88:	2821      	cmp	r0, #33	; 0x21
 8001e8a:	d10a      	bne.n	8001ea2 <UART_DMAError+0x26>
 8001e8c:	0612      	lsls	r2, r2, #24
 8001e8e:	d508      	bpl.n	8001ea2 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8001e90:	2200      	movs	r2, #0
 8001e92:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001e9a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8001ea2:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001ea4:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8001ea8:	2a22      	cmp	r2, #34	; 0x22
 8001eaa:	d106      	bne.n	8001eba <UART_DMAError+0x3e>
 8001eac:	065b      	lsls	r3, r3, #25
 8001eae:	d504      	bpl.n	8001eba <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	f7ff fd99 	bl	80019ec <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001eba:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001ebc:	f043 0310 	orr.w	r3, r3, #16
 8001ec0:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001ec2:	4608      	mov	r0, r1
 8001ec4:	f7ff ffd9 	bl	8001e7a <HAL_UART_ErrorCallback>
 8001ec8:	bd08      	pop	{r3, pc}
	...

08001ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b530      	push	{r4, r5, lr}
 8001ece:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed0:	2230      	movs	r2, #48	; 0x30
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	a808      	add	r0, sp, #32
 8001ed6:	f000 fb47 	bl	8002568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eda:	2100      	movs	r1, #0
 8001edc:	2214      	movs	r2, #20
 8001ede:	a803      	add	r0, sp, #12
 8001ee0:	f000 fb42 	bl	8002568 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	2400      	movs	r4, #0
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <SystemClock_Config+0x8c>)
 8001ee8:	9401      	str	r4, [sp, #4]
 8001eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ef4:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001efe:	9402      	str	r4, [sp, #8]
 8001f00:	6813      	ldr	r3, [r2, #0]
 8001f02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f0e:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f1c:	2310      	movs	r3, #16
 8001f1e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f20:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f22:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f26:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f28:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f2a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f2c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f2e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f30:	2307      	movs	r3, #7
 8001f32:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f34:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f36:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f38:	f7ff f848 	bl	8000fcc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f40:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f46:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f48:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f4a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f4c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f4e:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f50:	f7ff f9ec 	bl	800132c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001f54:	b015      	add	sp, #84	; 0x54
 8001f56:	bd30      	pop	{r4, r5, pc}
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40007000 	.word	0x40007000

08001f60 <main>:
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b09c      	sub	sp, #112	; 0x70
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f64:	2400      	movs	r4, #0
 8001f66:	4da7      	ldr	r5, [pc, #668]	; (8002204 <main+0x2a4>)
  huart2.Instance = USART2;
 8001f68:	4fa7      	ldr	r7, [pc, #668]	; (8002208 <main+0x2a8>)
  hadc1.Instance = ADC1;
 8001f6a:	4ea8      	ldr	r6, [pc, #672]	; (800220c <main+0x2ac>)
  HAL_Init();
 8001f6c:	f7fe fb34 	bl	80005d8 <HAL_Init>
  SystemClock_Config();
 8001f70:	f7ff ffac 	bl	8001ecc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	2214      	movs	r2, #20
 8001f76:	2100      	movs	r1, #0
 8001f78:	a815      	add	r0, sp, #84	; 0x54
 8001f7a:	f000 faf5 	bl	8002568 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7e:	9404      	str	r4, [sp, #16]
 8001f80:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f82:	48a3      	ldr	r0, [pc, #652]	; (8002210 <main+0x2b0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	632b      	str	r3, [r5, #48]	; 0x30
 8001f8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	9304      	str	r3, [sp, #16]
 8001f92:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f94:	9405      	str	r4, [sp, #20]
 8001f96:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9c:	632b      	str	r3, [r5, #48]	; 0x30
 8001f9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa4:	9305      	str	r3, [sp, #20]
 8001fa6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	9406      	str	r4, [sp, #24]
 8001faa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	632b      	str	r3, [r5, #48]	; 0x30
 8001fb2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	9306      	str	r3, [sp, #24]
 8001fba:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbc:	9407      	str	r4, [sp, #28]
 8001fbe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	632b      	str	r3, [r5, #48]	; 0x30
 8001fc6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fc8:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fcc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fd0:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	9b07      	ldr	r3, [sp, #28]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fd4:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fd8:	f7fe fff2 	bl	8000fc0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fdc:	4b8d      	ldr	r3, [pc, #564]	; (8002214 <main+0x2b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fde:	488e      	ldr	r0, [pc, #568]	; (8002218 <main+0x2b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fe0:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	a915      	add	r1, sp, #84	; 0x54

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = B1_Pin;
 8001fea:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f7fe ff11 	bl	8000e14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ff2:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	a915      	add	r1, sp, #84	; 0x54
 8001ff6:	4886      	ldr	r0, [pc, #536]	; (8002210 <main+0x2b0>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ff8:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffa:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002002:	f7fe ff07 	bl	8000e14 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002006:	9402      	str	r4, [sp, #8]
 8002008:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800200a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800200e:	632b      	str	r3, [r5, #48]	; 0x30
 8002010:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	9302      	str	r3, [sp, #8]
 8002018:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800201a:	9403      	str	r4, [sp, #12]
 800201c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800201e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002022:	632b      	str	r3, [r5, #48]	; 0x30
 8002024:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800202a:	4622      	mov	r2, r4
 800202c:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800202e:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002030:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002032:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002034:	f7fe fd0c 	bl	8000a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002038:	2010      	movs	r0, #16
 800203a:	f7fe fd3d 	bl	8000ab8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800203e:	4621      	mov	r1, r4
 8002040:	4622      	mov	r2, r4
 8002042:	2038      	movs	r0, #56	; 0x38
 8002044:	f7fe fd04 	bl	8000a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002048:	2038      	movs	r0, #56	; 0x38
 800204a:	f7fe fd35 	bl	8000ab8 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 115200;
 800204e:	4a73      	ldr	r2, [pc, #460]	; (800221c <main+0x2bc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002050:	60bc      	str	r4, [r7, #8]
  huart2.Init.BaudRate = 115200;
 8002052:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002056:	e887 000c 	stmia.w	r7, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800205a:	4638      	mov	r0, r7
  huart2.Init.Mode = UART_MODE_TX_RX;
 800205c:	230c      	movs	r3, #12
 800205e:	617b      	str	r3, [r7, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002060:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002062:	613c      	str	r4, [r7, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002064:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002066:	61fc      	str	r4, [r7, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002068:	f7ff fe10 	bl	8001c8c <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 800206c:	2210      	movs	r2, #16
 800206e:	4621      	mov	r1, r4
 8002070:	a815      	add	r0, sp, #84	; 0x54
 8002072:	f000 fa79 	bl	8002568 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002076:	496a      	ldr	r1, [pc, #424]	; (8002220 <main+0x2c0>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002078:	60b4      	str	r4, [r6, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800207a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800207e:	e886 000a 	stmia.w	r6, {r1, r3}
  hadc1.Init.NbrOfConversion = 3;
 8002082:	f04f 0903 	mov.w	r9, #3
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002086:	4b67      	ldr	r3, [pc, #412]	; (8002224 <main+0x2c4>)
 8002088:	62b3      	str	r3, [r6, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800208a:	4630      	mov	r0, r6
  hadc1.Init.ScanConvMode = ENABLE;
 800208c:	f8c6 8010 	str.w	r8, [r6, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002090:	f8c6 8018 	str.w	r8, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002094:	6234      	str	r4, [r6, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002096:	62f4      	str	r4, [r6, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002098:	60f4      	str	r4, [r6, #12]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800209a:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800209e:	f8c6 8014 	str.w	r8, [r6, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80020a2:	2502      	movs	r5, #2
  hadc1.Init.NbrOfConversion = 3;
 80020a4:	f8c6 901c 	str.w	r9, [r6, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020a8:	f7fe fac2 	bl	8000630 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ac:	a915      	add	r1, sp, #84	; 0x54
 80020ae:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_0;
 80020b0:	9415      	str	r4, [sp, #84]	; 0x54
  sConfig.Rank = 1;
 80020b2:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80020b6:	9517      	str	r5, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b8:	f7fe fc22 	bl	8000900 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020bc:	a915      	add	r1, sp, #84	; 0x54
 80020be:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_1;
 80020c0:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  sConfig.Rank = 2;
 80020c4:	9516      	str	r5, [sp, #88]	; 0x58
  sConfig.Channel = ADC_CHANNEL_4;
 80020c6:	f04f 0804 	mov.w	r8, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ca:	f7fe fc19 	bl	8000900 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ce:	a915      	add	r1, sp, #84	; 0x54
 80020d0:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_4;
 80020d2:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  sConfig.Rank = 3;
 80020d6:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020da:	f7fe fc11 	bl	8000900 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020de:	4621      	mov	r1, r4
 80020e0:	2210      	movs	r2, #16
 80020e2:	a80a      	add	r0, sp, #40	; 0x28
 80020e4:	f000 fa40 	bl	8002568 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e8:	4621      	mov	r1, r4
 80020ea:	221c      	movs	r2, #28
 80020ec:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ee:	9408      	str	r4, [sp, #32]
 80020f0:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f2:	f000 fa39 	bl	8002568 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020f6:	221c      	movs	r2, #28
 80020f8:	4621      	mov	r1, r4
 80020fa:	a815      	add	r0, sp, #84	; 0x54
  htim1.Instance = TIM1;
 80020fc:	4d4a      	ldr	r5, [pc, #296]	; (8002228 <main+0x2c8>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020fe:	f000 fa33 	bl	8002568 <memset>
  htim1.Init.Prescaler = 32940;
 8002102:	484a      	ldr	r0, [pc, #296]	; (800222c <main+0x2cc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002104:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 32940;
 8002106:	f248 03ac 	movw	r3, #32940	; 0x80ac
 800210a:	e885 0009 	stmia.w	r5, {r0, r3}
  htim1.Init.Period = 2550;
 800210e:	f640 13f6 	movw	r3, #2550	; 0x9f6
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002112:	4628      	mov	r0, r5
  htim1.Init.Period = 2550;
 8002114:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002116:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8002118:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800211a:	f7ff fb3b 	bl	8001794 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800211e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002122:	a90a      	add	r1, sp, #40	; 0x28
 8002124:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002126:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002128:	f7ff fa2f 	bl	800158a <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800212c:	4628      	mov	r0, r5
 800212e:	f7ff fb4b 	bl	80017c8 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002132:	a908      	add	r1, sp, #32
 8002134:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002136:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002138:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800213a:	f7ff fc0f 	bl	800195c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800213e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002140:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002142:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002144:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.Pulse = 1000;
 8002146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800214a:	4628      	mov	r0, r5
  sConfigOC.Pulse = 1000;
 800214c:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800214e:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002150:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002152:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002154:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002156:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002158:	f7ff fb7c 	bl	8001854 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800215c:	4642      	mov	r2, r8
 800215e:	a90e      	add	r1, sp, #56	; 0x38
 8002160:	4628      	mov	r0, r5
 8002162:	f7ff fb77 	bl	8001854 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002166:	2208      	movs	r2, #8
 8002168:	a90e      	add	r1, sp, #56	; 0x38
 800216a:	4628      	mov	r0, r5
 800216c:	f7ff fb72 	bl	8001854 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002170:	a915      	add	r1, sp, #84	; 0x54
 8002172:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002174:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002176:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002178:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = 0;
 800217a:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800217c:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800217e:	941b      	str	r4, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002180:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002184:	f7ff fc0c 	bl	80019a0 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8002188:	4628      	mov	r0, r5
 800218a:	f000 f8e5 	bl	8002358 <HAL_TIM_MspPostInit>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // PWM start PA8
 800218e:	4621      	mov	r1, r4
 8002190:	4628      	mov	r0, r5
 8002192:	f7ff fbcd 	bl	8001930 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // PWM start PA9
 8002196:	4641      	mov	r1, r8
 8002198:	4628      	mov	r0, r5
 800219a:	f7ff fbc9 	bl	8001930 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // PWM start PA10
 800219e:	2108      	movs	r1, #8
 80021a0:	4628      	mov	r0, r5
 80021a2:	f7ff fbc5 	bl	8001930 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcValues, 3); // Read ADC values
 80021a6:	464a      	mov	r2, r9
 80021a8:	4921      	ldr	r1, [pc, #132]	; (8002230 <main+0x2d0>)
		snprintf(txData, sizeof(txData), "%d,%d,%d\r\n", adcValues[0], adcValues[1], adcValues[2]); // Send one string
 80021aa:	4c21      	ldr	r4, [pc, #132]	; (8002230 <main+0x2d0>)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcValues, 3); // Read ADC values
 80021ac:	4630      	mov	r0, r6
 80021ae:	f7fe fae3 	bl	8000778 <HAL_ADC_Start_DMA>
	HAL_UART_Receive_DMA(&huart2, rxData, 3); // Need to read 3 bytes
 80021b2:	4638      	mov	r0, r7
 80021b4:	464a      	mov	r2, r9
 80021b6:	491f      	ldr	r1, [pc, #124]	; (8002234 <main+0x2d4>)
		htim1.Instance->CCR1 = rxData[0]*10;
 80021b8:	4e1e      	ldr	r6, [pc, #120]	; (8002234 <main+0x2d4>)
		snprintf(txData, sizeof(txData), "%d,%d,%d\r\n", adcValues[0], adcValues[1], adcValues[2]); // Send one string
 80021ba:	4f1f      	ldr	r7, [pc, #124]	; (8002238 <main+0x2d8>)
	HAL_UART_Receive_DMA(&huart2, rxData, 3); // Need to read 3 bytes
 80021bc:	f7ff fdf2 	bl	8001da4 <HAL_UART_Receive_DMA>
		htim1.Instance->CCR1 = rxData[0]*10;
 80021c0:	7833      	ldrb	r3, [r6, #0]
 80021c2:	682a      	ldr	r2, [r5, #0]
 80021c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	6353      	str	r3, [r2, #52]	; 0x34
		htim1.Instance->CCR2 = rxData[1]*10;
 80021cc:	7873      	ldrb	r3, [r6, #1]
 80021ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	6393      	str	r3, [r2, #56]	; 0x38
		htim1.Instance->CCR3 = rxData[2]*10;
 80021d6:	78b3      	ldrb	r3, [r6, #2]
 80021d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	63d3      	str	r3, [r2, #60]	; 0x3c
		snprintf(txData, sizeof(txData), "%d,%d,%d\r\n", adcValues[0], adcValues[1], adcValues[2]); // Send one string
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	6862      	ldr	r2, [r4, #4]
 80021e4:	68a1      	ldr	r1, [r4, #8]
 80021e6:	9101      	str	r1, [sp, #4]
 80021e8:	9200      	str	r2, [sp, #0]
 80021ea:	2114      	movs	r1, #20
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <main+0x2dc>)
 80021ee:	4638      	mov	r0, r7
 80021f0:	f000 f9c2 	bl	8002578 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *) txData, sizeof(txData), 10);
 80021f4:	230a      	movs	r3, #10
 80021f6:	2214      	movs	r2, #20
 80021f8:	4639      	mov	r1, r7
 80021fa:	4803      	ldr	r0, [pc, #12]	; (8002208 <main+0x2a8>)
 80021fc:	f7ff fd74 	bl	8001ce8 <HAL_UART_Transmit>
 8002200:	e7de      	b.n	80021c0 <main+0x260>
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	20000204 	.word	0x20000204
 800220c:	20000120 	.word	0x20000120
 8002210:	40020000 	.word	0x40020000
 8002214:	10210000 	.word	0x10210000
 8002218:	40020800 	.word	0x40020800
 800221c:	40004400 	.word	0x40004400
 8002220:	40012000 	.word	0x40012000
 8002224:	0f000001 	.word	0x0f000001
 8002228:	200001c8 	.word	0x200001c8
 800222c:	40010000 	.word	0x40010000
 8002230:	2000009c 	.word	0x2000009c
 8002234:	200000a8 	.word	0x200000a8
 8002238:	2000010c 	.word	0x2000010c
 800223c:	08002e10 	.word	0x08002e10

08002240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002240:	4770      	bx	lr
	...

08002244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_MspInit+0x3c>)
 8002248:	2100      	movs	r1, #0
 800224a:	9100      	str	r1, [sp, #0]
 800224c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800224e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002252:	645a      	str	r2, [r3, #68]	; 0x44
 8002254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002256:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800225a:	9200      	str	r2, [sp, #0]
 800225c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800225e:	9101      	str	r1, [sp, #4]
 8002260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002262:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002270:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002274:	f7fe fbda 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002278:	b003      	add	sp, #12
 800227a:	f85d fb04 	ldr.w	pc, [sp], #4
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800

08002284 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	4606      	mov	r6, r0
 8002288:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228a:	2214      	movs	r2, #20
 800228c:	2100      	movs	r1, #0
 800228e:	a803      	add	r0, sp, #12
 8002290:	f000 f96a 	bl	8002568 <memset>
  if(hadc->Instance==ADC1)
 8002294:	6832      	ldr	r2, [r6, #0]
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_ADC_MspInit+0x94>)
 8002298:	429a      	cmp	r2, r3
 800229a:	d13a      	bne.n	8002312 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800229c:	2500      	movs	r5, #0
 800229e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80022a2:	9501      	str	r5, [sp, #4]
 80022a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	481d      	ldr	r0, [pc, #116]	; (800231c <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80022a8:	4c1d      	ldr	r4, [pc, #116]	; (8002320 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
 80022b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022b2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80022b6:	9201      	str	r2, [sp, #4]
 80022b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	9502      	str	r5, [sp, #8]
 80022bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80022ce:	2313      	movs	r3, #19
 80022d0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022d4:	2303      	movs	r3, #3
 80022d6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d8:	f7fe fd9c 	bl	8000e14 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022de:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80022e0:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022e8:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ee:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022f4:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022f6:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022f8:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022fc:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022fe:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002300:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002302:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002304:	f7fe fc10 	bl	8000b28 <HAL_DMA_Init>
 8002308:	b108      	cbz	r0, 800230e <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 800230a:	f7ff ff99 	bl	8002240 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800230e:	63b4      	str	r4, [r6, #56]	; 0x38
 8002310:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002312:	b008      	add	sp, #32
 8002314:	bd70      	pop	{r4, r5, r6, pc}
 8002316:	bf00      	nop
 8002318:	40012000 	.word	0x40012000
 800231c:	40020000 	.word	0x40020000
 8002320:	20000168 	.word	0x20000168
 8002324:	40026410 	.word	0x40026410

08002328 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 8002328:	6802      	ldr	r2, [r0, #0]
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_TIM_Base_MspInit+0x28>)
 800232c:	429a      	cmp	r2, r3
{
 800232e:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8002330:	d10b      	bne.n	800234a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <HAL_TIM_Base_MspInit+0x2c>)
 8002338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800234a:	b002      	add	sp, #8
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002358:	b510      	push	{r4, lr}
 800235a:	4604      	mov	r4, r0
 800235c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235e:	2214      	movs	r2, #20
 8002360:	2100      	movs	r1, #0
 8002362:	a801      	add	r0, sp, #4
 8002364:	f000 f900 	bl	8002568 <memset>
  if(htim->Instance==TIM1)
 8002368:	6822      	ldr	r2, [r4, #0]
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_TIM_MspPostInit+0x4c>)
 800236c:	429a      	cmp	r2, r3
 800236e:	d116      	bne.n	800239e <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002370:	2300      	movs	r3, #0
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	480d      	ldr	r0, [pc, #52]	; (80023ac <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800238a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800238e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002396:	2301      	movs	r3, #1
 8002398:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f7fe fd3b 	bl	8000e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800239e:	b006      	add	sp, #24
 80023a0:	bd10      	pop	{r4, pc}
 80023a2:	bf00      	nop
 80023a4:	40010000 	.word	0x40010000
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020000 	.word	0x40020000

080023b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	4606      	mov	r6, r0
 80023b4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b6:	2214      	movs	r2, #20
 80023b8:	2100      	movs	r1, #0
 80023ba:	a803      	add	r0, sp, #12
 80023bc:	f000 f8d4 	bl	8002568 <memset>
  if(huart->Instance==USART2)
 80023c0:	6832      	ldr	r2, [r6, #0]
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <HAL_UART_MspInit+0x94>)
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d13a      	bne.n	800243e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023c8:	2500      	movs	r5, #0
 80023ca:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80023ce:	9501      	str	r5, [sp, #4]
 80023d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d2:	481d      	ldr	r0, [pc, #116]	; (8002448 <HAL_UART_MspInit+0x98>)

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80023d4:	4c1d      	ldr	r4, [pc, #116]	; (800244c <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80023d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
 80023dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023de:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80023e2:	9201      	str	r2, [sp, #4]
 80023e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	9502      	str	r5, [sp, #8]
 80023e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	9302      	str	r3, [sp, #8]
 80023f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023fa:	230c      	movs	r3, #12
 80023fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002404:	2307      	movs	r3, #7
 8002406:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002408:	f7fe fd04 	bl	8000e14 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800240c:	4a10      	ldr	r2, [pc, #64]	; (8002450 <HAL_UART_MspInit+0xa0>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800240e:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002410:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002414:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800241c:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800241e:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002420:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002424:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002426:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002428:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800242a:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800242c:	6225      	str	r5, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800242e:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002430:	f7fe fb7a 	bl	8000b28 <HAL_DMA_Init>
 8002434:	b108      	cbz	r0, 800243a <HAL_UART_MspInit+0x8a>
    {
      Error_Handler();
 8002436:	f7ff ff03 	bl	8002240 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800243a:	6374      	str	r4, [r6, #52]	; 0x34
 800243c:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800243e:	b008      	add	sp, #32
 8002440:	bd70      	pop	{r4, r5, r6, pc}
 8002442:	bf00      	nop
 8002444:	40004400 	.word	0x40004400
 8002448:	40020000 	.word	0x40020000
 800244c:	200000ac 	.word	0x200000ac
 8002450:	40026088 	.word	0x40026088

08002454 <NMI_Handler>:
 8002454:	4770      	bx	lr

08002456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002456:	e7fe      	b.n	8002456 <HardFault_Handler>

08002458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002458:	e7fe      	b.n	8002458 <MemManage_Handler>

0800245a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245a:	e7fe      	b.n	800245a <BusFault_Handler>

0800245c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800245c:	e7fe      	b.n	800245c <UsageFault_Handler>

0800245e <SVC_Handler>:
 800245e:	4770      	bx	lr

08002460 <DebugMon_Handler>:
 8002460:	4770      	bx	lr

08002462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002462:	4770      	bx	lr

08002464 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002464:	f7fe b8d2 	b.w	800060c <HAL_IncTick>

08002468 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002468:	4801      	ldr	r0, [pc, #4]	; (8002470 <DMA1_Stream5_IRQHandler+0x8>)
 800246a:	f7fe bc19 	b.w	8000ca0 <HAL_DMA_IRQHandler>
 800246e:	bf00      	nop
 8002470:	200000ac 	.word	0x200000ac

08002474 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002474:	4801      	ldr	r0, [pc, #4]	; (800247c <DMA2_Stream0_IRQHandler+0x8>)
 8002476:	f7fe bc13 	b.w	8000ca0 <HAL_DMA_IRQHandler>
 800247a:	bf00      	nop
 800247c:	20000168 	.word	0x20000168

08002480 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002480:	490f      	ldr	r1, [pc, #60]	; (80024c0 <SystemInit+0x40>)
 8002482:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002486:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <SystemInit+0x44>)
 8002490:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002492:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800249a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80024a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <SystemInit+0x48>)
 80024aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024b2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80024b4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80024ba:	608b      	str	r3, [r1, #8]
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00
 80024c4:	40023800 	.word	0x40023800
 80024c8:	24003010 	.word	0x24003010

080024cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002504 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024d2:	e003      	b.n	80024dc <LoopCopyDataInit>

080024d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024da:	3104      	adds	r1, #4

080024dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024dc:	480b      	ldr	r0, [pc, #44]	; (800250c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024e4:	d3f6      	bcc.n	80024d4 <CopyDataInit>
  ldr  r2, =_sbss
 80024e6:	4a0b      	ldr	r2, [pc, #44]	; (8002514 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024e8:	e002      	b.n	80024f0 <LoopFillZerobss>

080024ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024ec:	f842 3b04 	str.w	r3, [r2], #4

080024f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024f4:	d3f9      	bcc.n	80024ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024f6:	f7ff ffc3 	bl	8002480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024fa:	f000 f811 	bl	8002520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024fe:	f7ff fd2f 	bl	8001f60 <main>
  bx  lr    
 8002502:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002504:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002508:	08002e78 	.word	0x08002e78
  ldr  r0, =_sdata
 800250c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002510:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002514:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002518:	20000248 	.word	0x20000248

0800251c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800251c:	e7fe      	b.n	800251c <ADC_IRQHandler>
	...

08002520 <__libc_init_array>:
 8002520:	b570      	push	{r4, r5, r6, lr}
 8002522:	4e0d      	ldr	r6, [pc, #52]	; (8002558 <__libc_init_array+0x38>)
 8002524:	4c0d      	ldr	r4, [pc, #52]	; (800255c <__libc_init_array+0x3c>)
 8002526:	1ba4      	subs	r4, r4, r6
 8002528:	10a4      	asrs	r4, r4, #2
 800252a:	2500      	movs	r5, #0
 800252c:	42a5      	cmp	r5, r4
 800252e:	d109      	bne.n	8002544 <__libc_init_array+0x24>
 8002530:	4e0b      	ldr	r6, [pc, #44]	; (8002560 <__libc_init_array+0x40>)
 8002532:	4c0c      	ldr	r4, [pc, #48]	; (8002564 <__libc_init_array+0x44>)
 8002534:	f000 fc5c 	bl	8002df0 <_init>
 8002538:	1ba4      	subs	r4, r4, r6
 800253a:	10a4      	asrs	r4, r4, #2
 800253c:	2500      	movs	r5, #0
 800253e:	42a5      	cmp	r5, r4
 8002540:	d105      	bne.n	800254e <__libc_init_array+0x2e>
 8002542:	bd70      	pop	{r4, r5, r6, pc}
 8002544:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002548:	4798      	blx	r3
 800254a:	3501      	adds	r5, #1
 800254c:	e7ee      	b.n	800252c <__libc_init_array+0xc>
 800254e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002552:	4798      	blx	r3
 8002554:	3501      	adds	r5, #1
 8002556:	e7f2      	b.n	800253e <__libc_init_array+0x1e>
 8002558:	08002e70 	.word	0x08002e70
 800255c:	08002e70 	.word	0x08002e70
 8002560:	08002e70 	.word	0x08002e70
 8002564:	08002e74 	.word	0x08002e74

08002568 <memset>:
 8002568:	4402      	add	r2, r0
 800256a:	4603      	mov	r3, r0
 800256c:	4293      	cmp	r3, r2
 800256e:	d100      	bne.n	8002572 <memset+0xa>
 8002570:	4770      	bx	lr
 8002572:	f803 1b01 	strb.w	r1, [r3], #1
 8002576:	e7f9      	b.n	800256c <memset+0x4>

08002578 <sniprintf>:
 8002578:	b40c      	push	{r2, r3}
 800257a:	b530      	push	{r4, r5, lr}
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <sniprintf+0x64>)
 800257e:	1e0c      	subs	r4, r1, #0
 8002580:	b09d      	sub	sp, #116	; 0x74
 8002582:	681d      	ldr	r5, [r3, #0]
 8002584:	da08      	bge.n	8002598 <sniprintf+0x20>
 8002586:	238b      	movs	r3, #139	; 0x8b
 8002588:	602b      	str	r3, [r5, #0]
 800258a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800258e:	b01d      	add	sp, #116	; 0x74
 8002590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002594:	b002      	add	sp, #8
 8002596:	4770      	bx	lr
 8002598:	f44f 7302 	mov.w	r3, #520	; 0x208
 800259c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80025a0:	bf14      	ite	ne
 80025a2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80025a6:	4623      	moveq	r3, r4
 80025a8:	9304      	str	r3, [sp, #16]
 80025aa:	9307      	str	r3, [sp, #28]
 80025ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b0:	9002      	str	r0, [sp, #8]
 80025b2:	9006      	str	r0, [sp, #24]
 80025b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80025b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80025ba:	ab21      	add	r3, sp, #132	; 0x84
 80025bc:	a902      	add	r1, sp, #8
 80025be:	4628      	mov	r0, r5
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	f000 f869 	bl	8002698 <_svfiprintf_r>
 80025c6:	1c43      	adds	r3, r0, #1
 80025c8:	bfbc      	itt	lt
 80025ca:	238b      	movlt	r3, #139	; 0x8b
 80025cc:	602b      	strlt	r3, [r5, #0]
 80025ce:	2c00      	cmp	r4, #0
 80025d0:	d0dd      	beq.n	800258e <sniprintf+0x16>
 80025d2:	9b02      	ldr	r3, [sp, #8]
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e7d9      	b.n	800258e <sniprintf+0x16>
 80025da:	bf00      	nop
 80025dc:	2000000c 	.word	0x2000000c

080025e0 <__ssputs_r>:
 80025e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025e4:	688e      	ldr	r6, [r1, #8]
 80025e6:	429e      	cmp	r6, r3
 80025e8:	4682      	mov	sl, r0
 80025ea:	460c      	mov	r4, r1
 80025ec:	4691      	mov	r9, r2
 80025ee:	4698      	mov	r8, r3
 80025f0:	d835      	bhi.n	800265e <__ssputs_r+0x7e>
 80025f2:	898a      	ldrh	r2, [r1, #12]
 80025f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80025f8:	d031      	beq.n	800265e <__ssputs_r+0x7e>
 80025fa:	6825      	ldr	r5, [r4, #0]
 80025fc:	6909      	ldr	r1, [r1, #16]
 80025fe:	1a6f      	subs	r7, r5, r1
 8002600:	6965      	ldr	r5, [r4, #20]
 8002602:	2302      	movs	r3, #2
 8002604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002608:	fb95 f5f3 	sdiv	r5, r5, r3
 800260c:	f108 0301 	add.w	r3, r8, #1
 8002610:	443b      	add	r3, r7
 8002612:	429d      	cmp	r5, r3
 8002614:	bf38      	it	cc
 8002616:	461d      	movcc	r5, r3
 8002618:	0553      	lsls	r3, r2, #21
 800261a:	d531      	bpl.n	8002680 <__ssputs_r+0xa0>
 800261c:	4629      	mov	r1, r5
 800261e:	f000 fb39 	bl	8002c94 <_malloc_r>
 8002622:	4606      	mov	r6, r0
 8002624:	b950      	cbnz	r0, 800263c <__ssputs_r+0x5c>
 8002626:	230c      	movs	r3, #12
 8002628:	f8ca 3000 	str.w	r3, [sl]
 800262c:	89a3      	ldrh	r3, [r4, #12]
 800262e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002632:	81a3      	strh	r3, [r4, #12]
 8002634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800263c:	463a      	mov	r2, r7
 800263e:	6921      	ldr	r1, [r4, #16]
 8002640:	f000 fab4 	bl	8002bac <memcpy>
 8002644:	89a3      	ldrh	r3, [r4, #12]
 8002646:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800264a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264e:	81a3      	strh	r3, [r4, #12]
 8002650:	6126      	str	r6, [r4, #16]
 8002652:	6165      	str	r5, [r4, #20]
 8002654:	443e      	add	r6, r7
 8002656:	1bed      	subs	r5, r5, r7
 8002658:	6026      	str	r6, [r4, #0]
 800265a:	60a5      	str	r5, [r4, #8]
 800265c:	4646      	mov	r6, r8
 800265e:	4546      	cmp	r6, r8
 8002660:	bf28      	it	cs
 8002662:	4646      	movcs	r6, r8
 8002664:	4632      	mov	r2, r6
 8002666:	4649      	mov	r1, r9
 8002668:	6820      	ldr	r0, [r4, #0]
 800266a:	f000 faaa 	bl	8002bc2 <memmove>
 800266e:	68a3      	ldr	r3, [r4, #8]
 8002670:	1b9b      	subs	r3, r3, r6
 8002672:	60a3      	str	r3, [r4, #8]
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	441e      	add	r6, r3
 8002678:	6026      	str	r6, [r4, #0]
 800267a:	2000      	movs	r0, #0
 800267c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002680:	462a      	mov	r2, r5
 8002682:	f000 fb65 	bl	8002d50 <_realloc_r>
 8002686:	4606      	mov	r6, r0
 8002688:	2800      	cmp	r0, #0
 800268a:	d1e1      	bne.n	8002650 <__ssputs_r+0x70>
 800268c:	6921      	ldr	r1, [r4, #16]
 800268e:	4650      	mov	r0, sl
 8002690:	f000 fab2 	bl	8002bf8 <_free_r>
 8002694:	e7c7      	b.n	8002626 <__ssputs_r+0x46>
	...

08002698 <_svfiprintf_r>:
 8002698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800269c:	b09d      	sub	sp, #116	; 0x74
 800269e:	4680      	mov	r8, r0
 80026a0:	9303      	str	r3, [sp, #12]
 80026a2:	898b      	ldrh	r3, [r1, #12]
 80026a4:	061c      	lsls	r4, r3, #24
 80026a6:	460d      	mov	r5, r1
 80026a8:	4616      	mov	r6, r2
 80026aa:	d50f      	bpl.n	80026cc <_svfiprintf_r+0x34>
 80026ac:	690b      	ldr	r3, [r1, #16]
 80026ae:	b96b      	cbnz	r3, 80026cc <_svfiprintf_r+0x34>
 80026b0:	2140      	movs	r1, #64	; 0x40
 80026b2:	f000 faef 	bl	8002c94 <_malloc_r>
 80026b6:	6028      	str	r0, [r5, #0]
 80026b8:	6128      	str	r0, [r5, #16]
 80026ba:	b928      	cbnz	r0, 80026c8 <_svfiprintf_r+0x30>
 80026bc:	230c      	movs	r3, #12
 80026be:	f8c8 3000 	str.w	r3, [r8]
 80026c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026c6:	e0c5      	b.n	8002854 <_svfiprintf_r+0x1bc>
 80026c8:	2340      	movs	r3, #64	; 0x40
 80026ca:	616b      	str	r3, [r5, #20]
 80026cc:	2300      	movs	r3, #0
 80026ce:	9309      	str	r3, [sp, #36]	; 0x24
 80026d0:	2320      	movs	r3, #32
 80026d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026d6:	2330      	movs	r3, #48	; 0x30
 80026d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026dc:	f04f 0b01 	mov.w	fp, #1
 80026e0:	4637      	mov	r7, r6
 80026e2:	463c      	mov	r4, r7
 80026e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d13c      	bne.n	8002766 <_svfiprintf_r+0xce>
 80026ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80026f0:	d00b      	beq.n	800270a <_svfiprintf_r+0x72>
 80026f2:	4653      	mov	r3, sl
 80026f4:	4632      	mov	r2, r6
 80026f6:	4629      	mov	r1, r5
 80026f8:	4640      	mov	r0, r8
 80026fa:	f7ff ff71 	bl	80025e0 <__ssputs_r>
 80026fe:	3001      	adds	r0, #1
 8002700:	f000 80a3 	beq.w	800284a <_svfiprintf_r+0x1b2>
 8002704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002706:	4453      	add	r3, sl
 8002708:	9309      	str	r3, [sp, #36]	; 0x24
 800270a:	783b      	ldrb	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 809c 	beq.w	800284a <_svfiprintf_r+0x1b2>
 8002712:	2300      	movs	r3, #0
 8002714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002718:	9304      	str	r3, [sp, #16]
 800271a:	9307      	str	r3, [sp, #28]
 800271c:	9205      	str	r2, [sp, #20]
 800271e:	9306      	str	r3, [sp, #24]
 8002720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002724:	931a      	str	r3, [sp, #104]	; 0x68
 8002726:	2205      	movs	r2, #5
 8002728:	7821      	ldrb	r1, [r4, #0]
 800272a:	4850      	ldr	r0, [pc, #320]	; (800286c <_svfiprintf_r+0x1d4>)
 800272c:	f7fd fd58 	bl	80001e0 <memchr>
 8002730:	1c67      	adds	r7, r4, #1
 8002732:	9b04      	ldr	r3, [sp, #16]
 8002734:	b9d8      	cbnz	r0, 800276e <_svfiprintf_r+0xd6>
 8002736:	06d9      	lsls	r1, r3, #27
 8002738:	bf44      	itt	mi
 800273a:	2220      	movmi	r2, #32
 800273c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002740:	071a      	lsls	r2, r3, #28
 8002742:	bf44      	itt	mi
 8002744:	222b      	movmi	r2, #43	; 0x2b
 8002746:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800274a:	7822      	ldrb	r2, [r4, #0]
 800274c:	2a2a      	cmp	r2, #42	; 0x2a
 800274e:	d016      	beq.n	800277e <_svfiprintf_r+0xe6>
 8002750:	9a07      	ldr	r2, [sp, #28]
 8002752:	2100      	movs	r1, #0
 8002754:	200a      	movs	r0, #10
 8002756:	4627      	mov	r7, r4
 8002758:	3401      	adds	r4, #1
 800275a:	783b      	ldrb	r3, [r7, #0]
 800275c:	3b30      	subs	r3, #48	; 0x30
 800275e:	2b09      	cmp	r3, #9
 8002760:	d951      	bls.n	8002806 <_svfiprintf_r+0x16e>
 8002762:	b1c9      	cbz	r1, 8002798 <_svfiprintf_r+0x100>
 8002764:	e011      	b.n	800278a <_svfiprintf_r+0xf2>
 8002766:	2b25      	cmp	r3, #37	; 0x25
 8002768:	d0c0      	beq.n	80026ec <_svfiprintf_r+0x54>
 800276a:	4627      	mov	r7, r4
 800276c:	e7b9      	b.n	80026e2 <_svfiprintf_r+0x4a>
 800276e:	4a3f      	ldr	r2, [pc, #252]	; (800286c <_svfiprintf_r+0x1d4>)
 8002770:	1a80      	subs	r0, r0, r2
 8002772:	fa0b f000 	lsl.w	r0, fp, r0
 8002776:	4318      	orrs	r0, r3
 8002778:	9004      	str	r0, [sp, #16]
 800277a:	463c      	mov	r4, r7
 800277c:	e7d3      	b.n	8002726 <_svfiprintf_r+0x8e>
 800277e:	9a03      	ldr	r2, [sp, #12]
 8002780:	1d11      	adds	r1, r2, #4
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	9103      	str	r1, [sp, #12]
 8002786:	2a00      	cmp	r2, #0
 8002788:	db01      	blt.n	800278e <_svfiprintf_r+0xf6>
 800278a:	9207      	str	r2, [sp, #28]
 800278c:	e004      	b.n	8002798 <_svfiprintf_r+0x100>
 800278e:	4252      	negs	r2, r2
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	9207      	str	r2, [sp, #28]
 8002796:	9304      	str	r3, [sp, #16]
 8002798:	783b      	ldrb	r3, [r7, #0]
 800279a:	2b2e      	cmp	r3, #46	; 0x2e
 800279c:	d10e      	bne.n	80027bc <_svfiprintf_r+0x124>
 800279e:	787b      	ldrb	r3, [r7, #1]
 80027a0:	2b2a      	cmp	r3, #42	; 0x2a
 80027a2:	f107 0101 	add.w	r1, r7, #1
 80027a6:	d132      	bne.n	800280e <_svfiprintf_r+0x176>
 80027a8:	9b03      	ldr	r3, [sp, #12]
 80027aa:	1d1a      	adds	r2, r3, #4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	9203      	str	r2, [sp, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bfb8      	it	lt
 80027b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80027b8:	3702      	adds	r7, #2
 80027ba:	9305      	str	r3, [sp, #20]
 80027bc:	4c2c      	ldr	r4, [pc, #176]	; (8002870 <_svfiprintf_r+0x1d8>)
 80027be:	7839      	ldrb	r1, [r7, #0]
 80027c0:	2203      	movs	r2, #3
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7fd fd0c 	bl	80001e0 <memchr>
 80027c8:	b138      	cbz	r0, 80027da <_svfiprintf_r+0x142>
 80027ca:	2340      	movs	r3, #64	; 0x40
 80027cc:	1b00      	subs	r0, r0, r4
 80027ce:	fa03 f000 	lsl.w	r0, r3, r0
 80027d2:	9b04      	ldr	r3, [sp, #16]
 80027d4:	4303      	orrs	r3, r0
 80027d6:	9304      	str	r3, [sp, #16]
 80027d8:	3701      	adds	r7, #1
 80027da:	7839      	ldrb	r1, [r7, #0]
 80027dc:	4825      	ldr	r0, [pc, #148]	; (8002874 <_svfiprintf_r+0x1dc>)
 80027de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027e2:	2206      	movs	r2, #6
 80027e4:	1c7e      	adds	r6, r7, #1
 80027e6:	f7fd fcfb 	bl	80001e0 <memchr>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d035      	beq.n	800285a <_svfiprintf_r+0x1c2>
 80027ee:	4b22      	ldr	r3, [pc, #136]	; (8002878 <_svfiprintf_r+0x1e0>)
 80027f0:	b9fb      	cbnz	r3, 8002832 <_svfiprintf_r+0x19a>
 80027f2:	9b03      	ldr	r3, [sp, #12]
 80027f4:	3307      	adds	r3, #7
 80027f6:	f023 0307 	bic.w	r3, r3, #7
 80027fa:	3308      	adds	r3, #8
 80027fc:	9303      	str	r3, [sp, #12]
 80027fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002800:	444b      	add	r3, r9
 8002802:	9309      	str	r3, [sp, #36]	; 0x24
 8002804:	e76c      	b.n	80026e0 <_svfiprintf_r+0x48>
 8002806:	fb00 3202 	mla	r2, r0, r2, r3
 800280a:	2101      	movs	r1, #1
 800280c:	e7a3      	b.n	8002756 <_svfiprintf_r+0xbe>
 800280e:	2300      	movs	r3, #0
 8002810:	9305      	str	r3, [sp, #20]
 8002812:	4618      	mov	r0, r3
 8002814:	240a      	movs	r4, #10
 8002816:	460f      	mov	r7, r1
 8002818:	3101      	adds	r1, #1
 800281a:	783a      	ldrb	r2, [r7, #0]
 800281c:	3a30      	subs	r2, #48	; 0x30
 800281e:	2a09      	cmp	r2, #9
 8002820:	d903      	bls.n	800282a <_svfiprintf_r+0x192>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0ca      	beq.n	80027bc <_svfiprintf_r+0x124>
 8002826:	9005      	str	r0, [sp, #20]
 8002828:	e7c8      	b.n	80027bc <_svfiprintf_r+0x124>
 800282a:	fb04 2000 	mla	r0, r4, r0, r2
 800282e:	2301      	movs	r3, #1
 8002830:	e7f1      	b.n	8002816 <_svfiprintf_r+0x17e>
 8002832:	ab03      	add	r3, sp, #12
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	462a      	mov	r2, r5
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <_svfiprintf_r+0x1e4>)
 800283a:	a904      	add	r1, sp, #16
 800283c:	4640      	mov	r0, r8
 800283e:	f3af 8000 	nop.w
 8002842:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002846:	4681      	mov	r9, r0
 8002848:	d1d9      	bne.n	80027fe <_svfiprintf_r+0x166>
 800284a:	89ab      	ldrh	r3, [r5, #12]
 800284c:	065b      	lsls	r3, r3, #25
 800284e:	f53f af38 	bmi.w	80026c2 <_svfiprintf_r+0x2a>
 8002852:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002854:	b01d      	add	sp, #116	; 0x74
 8002856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800285a:	ab03      	add	r3, sp, #12
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	462a      	mov	r2, r5
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <_svfiprintf_r+0x1e4>)
 8002862:	a904      	add	r1, sp, #16
 8002864:	4640      	mov	r0, r8
 8002866:	f000 f881 	bl	800296c <_printf_i>
 800286a:	e7ea      	b.n	8002842 <_svfiprintf_r+0x1aa>
 800286c:	08002e33 	.word	0x08002e33
 8002870:	08002e39 	.word	0x08002e39
 8002874:	08002e3d 	.word	0x08002e3d
 8002878:	00000000 	.word	0x00000000
 800287c:	080025e1 	.word	0x080025e1

08002880 <_printf_common>:
 8002880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002884:	4691      	mov	r9, r2
 8002886:	461f      	mov	r7, r3
 8002888:	688a      	ldr	r2, [r1, #8]
 800288a:	690b      	ldr	r3, [r1, #16]
 800288c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002890:	4293      	cmp	r3, r2
 8002892:	bfb8      	it	lt
 8002894:	4613      	movlt	r3, r2
 8002896:	f8c9 3000 	str.w	r3, [r9]
 800289a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800289e:	4606      	mov	r6, r0
 80028a0:	460c      	mov	r4, r1
 80028a2:	b112      	cbz	r2, 80028aa <_printf_common+0x2a>
 80028a4:	3301      	adds	r3, #1
 80028a6:	f8c9 3000 	str.w	r3, [r9]
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	0699      	lsls	r1, r3, #26
 80028ae:	bf42      	ittt	mi
 80028b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80028b4:	3302      	addmi	r3, #2
 80028b6:	f8c9 3000 	strmi.w	r3, [r9]
 80028ba:	6825      	ldr	r5, [r4, #0]
 80028bc:	f015 0506 	ands.w	r5, r5, #6
 80028c0:	d107      	bne.n	80028d2 <_printf_common+0x52>
 80028c2:	f104 0a19 	add.w	sl, r4, #25
 80028c6:	68e3      	ldr	r3, [r4, #12]
 80028c8:	f8d9 2000 	ldr.w	r2, [r9]
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	429d      	cmp	r5, r3
 80028d0:	db29      	blt.n	8002926 <_printf_common+0xa6>
 80028d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80028d6:	6822      	ldr	r2, [r4, #0]
 80028d8:	3300      	adds	r3, #0
 80028da:	bf18      	it	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	0692      	lsls	r2, r2, #26
 80028e0:	d42e      	bmi.n	8002940 <_printf_common+0xc0>
 80028e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028e6:	4639      	mov	r1, r7
 80028e8:	4630      	mov	r0, r6
 80028ea:	47c0      	blx	r8
 80028ec:	3001      	adds	r0, #1
 80028ee:	d021      	beq.n	8002934 <_printf_common+0xb4>
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	68e5      	ldr	r5, [r4, #12]
 80028f4:	f8d9 2000 	ldr.w	r2, [r9]
 80028f8:	f003 0306 	and.w	r3, r3, #6
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	bf08      	it	eq
 8002900:	1aad      	subeq	r5, r5, r2
 8002902:	68a3      	ldr	r3, [r4, #8]
 8002904:	6922      	ldr	r2, [r4, #16]
 8002906:	bf0c      	ite	eq
 8002908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800290c:	2500      	movne	r5, #0
 800290e:	4293      	cmp	r3, r2
 8002910:	bfc4      	itt	gt
 8002912:	1a9b      	subgt	r3, r3, r2
 8002914:	18ed      	addgt	r5, r5, r3
 8002916:	f04f 0900 	mov.w	r9, #0
 800291a:	341a      	adds	r4, #26
 800291c:	454d      	cmp	r5, r9
 800291e:	d11b      	bne.n	8002958 <_printf_common+0xd8>
 8002920:	2000      	movs	r0, #0
 8002922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002926:	2301      	movs	r3, #1
 8002928:	4652      	mov	r2, sl
 800292a:	4639      	mov	r1, r7
 800292c:	4630      	mov	r0, r6
 800292e:	47c0      	blx	r8
 8002930:	3001      	adds	r0, #1
 8002932:	d103      	bne.n	800293c <_printf_common+0xbc>
 8002934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800293c:	3501      	adds	r5, #1
 800293e:	e7c2      	b.n	80028c6 <_printf_common+0x46>
 8002940:	18e1      	adds	r1, r4, r3
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	2030      	movs	r0, #48	; 0x30
 8002946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800294a:	4422      	add	r2, r4
 800294c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002954:	3302      	adds	r3, #2
 8002956:	e7c4      	b.n	80028e2 <_printf_common+0x62>
 8002958:	2301      	movs	r3, #1
 800295a:	4622      	mov	r2, r4
 800295c:	4639      	mov	r1, r7
 800295e:	4630      	mov	r0, r6
 8002960:	47c0      	blx	r8
 8002962:	3001      	adds	r0, #1
 8002964:	d0e6      	beq.n	8002934 <_printf_common+0xb4>
 8002966:	f109 0901 	add.w	r9, r9, #1
 800296a:	e7d7      	b.n	800291c <_printf_common+0x9c>

0800296c <_printf_i>:
 800296c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002970:	4617      	mov	r7, r2
 8002972:	7e0a      	ldrb	r2, [r1, #24]
 8002974:	b085      	sub	sp, #20
 8002976:	2a6e      	cmp	r2, #110	; 0x6e
 8002978:	4698      	mov	r8, r3
 800297a:	4606      	mov	r6, r0
 800297c:	460c      	mov	r4, r1
 800297e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002980:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002984:	f000 80bc 	beq.w	8002b00 <_printf_i+0x194>
 8002988:	d81a      	bhi.n	80029c0 <_printf_i+0x54>
 800298a:	2a63      	cmp	r2, #99	; 0x63
 800298c:	d02e      	beq.n	80029ec <_printf_i+0x80>
 800298e:	d80a      	bhi.n	80029a6 <_printf_i+0x3a>
 8002990:	2a00      	cmp	r2, #0
 8002992:	f000 80c8 	beq.w	8002b26 <_printf_i+0x1ba>
 8002996:	2a58      	cmp	r2, #88	; 0x58
 8002998:	f000 808a 	beq.w	8002ab0 <_printf_i+0x144>
 800299c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029a0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80029a4:	e02a      	b.n	80029fc <_printf_i+0x90>
 80029a6:	2a64      	cmp	r2, #100	; 0x64
 80029a8:	d001      	beq.n	80029ae <_printf_i+0x42>
 80029aa:	2a69      	cmp	r2, #105	; 0x69
 80029ac:	d1f6      	bne.n	800299c <_printf_i+0x30>
 80029ae:	6821      	ldr	r1, [r4, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80029b6:	d023      	beq.n	8002a00 <_printf_i+0x94>
 80029b8:	1d11      	adds	r1, r2, #4
 80029ba:	6019      	str	r1, [r3, #0]
 80029bc:	6813      	ldr	r3, [r2, #0]
 80029be:	e027      	b.n	8002a10 <_printf_i+0xa4>
 80029c0:	2a73      	cmp	r2, #115	; 0x73
 80029c2:	f000 80b4 	beq.w	8002b2e <_printf_i+0x1c2>
 80029c6:	d808      	bhi.n	80029da <_printf_i+0x6e>
 80029c8:	2a6f      	cmp	r2, #111	; 0x6f
 80029ca:	d02a      	beq.n	8002a22 <_printf_i+0xb6>
 80029cc:	2a70      	cmp	r2, #112	; 0x70
 80029ce:	d1e5      	bne.n	800299c <_printf_i+0x30>
 80029d0:	680a      	ldr	r2, [r1, #0]
 80029d2:	f042 0220 	orr.w	r2, r2, #32
 80029d6:	600a      	str	r2, [r1, #0]
 80029d8:	e003      	b.n	80029e2 <_printf_i+0x76>
 80029da:	2a75      	cmp	r2, #117	; 0x75
 80029dc:	d021      	beq.n	8002a22 <_printf_i+0xb6>
 80029de:	2a78      	cmp	r2, #120	; 0x78
 80029e0:	d1dc      	bne.n	800299c <_printf_i+0x30>
 80029e2:	2278      	movs	r2, #120	; 0x78
 80029e4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80029e8:	496e      	ldr	r1, [pc, #440]	; (8002ba4 <_printf_i+0x238>)
 80029ea:	e064      	b.n	8002ab6 <_printf_i+0x14a>
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80029f2:	1d11      	adds	r1, r2, #4
 80029f4:	6019      	str	r1, [r3, #0]
 80029f6:	6813      	ldr	r3, [r2, #0]
 80029f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0a3      	b.n	8002b48 <_printf_i+0x1dc>
 8002a00:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002a04:	f102 0104 	add.w	r1, r2, #4
 8002a08:	6019      	str	r1, [r3, #0]
 8002a0a:	d0d7      	beq.n	80029bc <_printf_i+0x50>
 8002a0c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	da03      	bge.n	8002a1c <_printf_i+0xb0>
 8002a14:	222d      	movs	r2, #45	; 0x2d
 8002a16:	425b      	negs	r3, r3
 8002a18:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002a1c:	4962      	ldr	r1, [pc, #392]	; (8002ba8 <_printf_i+0x23c>)
 8002a1e:	220a      	movs	r2, #10
 8002a20:	e017      	b.n	8002a52 <_printf_i+0xe6>
 8002a22:	6820      	ldr	r0, [r4, #0]
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002a2a:	d003      	beq.n	8002a34 <_printf_i+0xc8>
 8002a2c:	1d08      	adds	r0, r1, #4
 8002a2e:	6018      	str	r0, [r3, #0]
 8002a30:	680b      	ldr	r3, [r1, #0]
 8002a32:	e006      	b.n	8002a42 <_printf_i+0xd6>
 8002a34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a38:	f101 0004 	add.w	r0, r1, #4
 8002a3c:	6018      	str	r0, [r3, #0]
 8002a3e:	d0f7      	beq.n	8002a30 <_printf_i+0xc4>
 8002a40:	880b      	ldrh	r3, [r1, #0]
 8002a42:	4959      	ldr	r1, [pc, #356]	; (8002ba8 <_printf_i+0x23c>)
 8002a44:	2a6f      	cmp	r2, #111	; 0x6f
 8002a46:	bf14      	ite	ne
 8002a48:	220a      	movne	r2, #10
 8002a4a:	2208      	moveq	r2, #8
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002a52:	6865      	ldr	r5, [r4, #4]
 8002a54:	60a5      	str	r5, [r4, #8]
 8002a56:	2d00      	cmp	r5, #0
 8002a58:	f2c0 809c 	blt.w	8002b94 <_printf_i+0x228>
 8002a5c:	6820      	ldr	r0, [r4, #0]
 8002a5e:	f020 0004 	bic.w	r0, r0, #4
 8002a62:	6020      	str	r0, [r4, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d13f      	bne.n	8002ae8 <_printf_i+0x17c>
 8002a68:	2d00      	cmp	r5, #0
 8002a6a:	f040 8095 	bne.w	8002b98 <_printf_i+0x22c>
 8002a6e:	4675      	mov	r5, lr
 8002a70:	2a08      	cmp	r2, #8
 8002a72:	d10b      	bne.n	8002a8c <_printf_i+0x120>
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	07da      	lsls	r2, r3, #31
 8002a78:	d508      	bpl.n	8002a8c <_printf_i+0x120>
 8002a7a:	6923      	ldr	r3, [r4, #16]
 8002a7c:	6862      	ldr	r2, [r4, #4]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	bfde      	ittt	le
 8002a82:	2330      	movle	r3, #48	; 0x30
 8002a84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002a8c:	ebae 0305 	sub.w	r3, lr, r5
 8002a90:	6123      	str	r3, [r4, #16]
 8002a92:	f8cd 8000 	str.w	r8, [sp]
 8002a96:	463b      	mov	r3, r7
 8002a98:	aa03      	add	r2, sp, #12
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	4630      	mov	r0, r6
 8002a9e:	f7ff feef 	bl	8002880 <_printf_common>
 8002aa2:	3001      	adds	r0, #1
 8002aa4:	d155      	bne.n	8002b52 <_printf_i+0x1e6>
 8002aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aaa:	b005      	add	sp, #20
 8002aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ab0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002ab4:	493c      	ldr	r1, [pc, #240]	; (8002ba8 <_printf_i+0x23c>)
 8002ab6:	6822      	ldr	r2, [r4, #0]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002abe:	f100 0504 	add.w	r5, r0, #4
 8002ac2:	601d      	str	r5, [r3, #0]
 8002ac4:	d001      	beq.n	8002aca <_printf_i+0x15e>
 8002ac6:	6803      	ldr	r3, [r0, #0]
 8002ac8:	e002      	b.n	8002ad0 <_printf_i+0x164>
 8002aca:	0655      	lsls	r5, r2, #25
 8002acc:	d5fb      	bpl.n	8002ac6 <_printf_i+0x15a>
 8002ace:	8803      	ldrh	r3, [r0, #0]
 8002ad0:	07d0      	lsls	r0, r2, #31
 8002ad2:	bf44      	itt	mi
 8002ad4:	f042 0220 	orrmi.w	r2, r2, #32
 8002ad8:	6022      	strmi	r2, [r4, #0]
 8002ada:	b91b      	cbnz	r3, 8002ae4 <_printf_i+0x178>
 8002adc:	6822      	ldr	r2, [r4, #0]
 8002ade:	f022 0220 	bic.w	r2, r2, #32
 8002ae2:	6022      	str	r2, [r4, #0]
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	e7b1      	b.n	8002a4c <_printf_i+0xe0>
 8002ae8:	4675      	mov	r5, lr
 8002aea:	fbb3 f0f2 	udiv	r0, r3, r2
 8002aee:	fb02 3310 	mls	r3, r2, r0, r3
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002af8:	4603      	mov	r3, r0
 8002afa:	2800      	cmp	r0, #0
 8002afc:	d1f5      	bne.n	8002aea <_printf_i+0x17e>
 8002afe:	e7b7      	b.n	8002a70 <_printf_i+0x104>
 8002b00:	6808      	ldr	r0, [r1, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	6949      	ldr	r1, [r1, #20]
 8002b06:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002b0a:	d004      	beq.n	8002b16 <_printf_i+0x1aa>
 8002b0c:	1d10      	adds	r0, r2, #4
 8002b0e:	6018      	str	r0, [r3, #0]
 8002b10:	6813      	ldr	r3, [r2, #0]
 8002b12:	6019      	str	r1, [r3, #0]
 8002b14:	e007      	b.n	8002b26 <_printf_i+0x1ba>
 8002b16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b1a:	f102 0004 	add.w	r0, r2, #4
 8002b1e:	6018      	str	r0, [r3, #0]
 8002b20:	6813      	ldr	r3, [r2, #0]
 8002b22:	d0f6      	beq.n	8002b12 <_printf_i+0x1a6>
 8002b24:	8019      	strh	r1, [r3, #0]
 8002b26:	2300      	movs	r3, #0
 8002b28:	6123      	str	r3, [r4, #16]
 8002b2a:	4675      	mov	r5, lr
 8002b2c:	e7b1      	b.n	8002a92 <_printf_i+0x126>
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	1d11      	adds	r1, r2, #4
 8002b32:	6019      	str	r1, [r3, #0]
 8002b34:	6815      	ldr	r5, [r2, #0]
 8002b36:	6862      	ldr	r2, [r4, #4]
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	f7fd fb50 	bl	80001e0 <memchr>
 8002b40:	b108      	cbz	r0, 8002b46 <_printf_i+0x1da>
 8002b42:	1b40      	subs	r0, r0, r5
 8002b44:	6060      	str	r0, [r4, #4]
 8002b46:	6863      	ldr	r3, [r4, #4]
 8002b48:	6123      	str	r3, [r4, #16]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b50:	e79f      	b.n	8002a92 <_printf_i+0x126>
 8002b52:	6923      	ldr	r3, [r4, #16]
 8002b54:	462a      	mov	r2, r5
 8002b56:	4639      	mov	r1, r7
 8002b58:	4630      	mov	r0, r6
 8002b5a:	47c0      	blx	r8
 8002b5c:	3001      	adds	r0, #1
 8002b5e:	d0a2      	beq.n	8002aa6 <_printf_i+0x13a>
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	079b      	lsls	r3, r3, #30
 8002b64:	d507      	bpl.n	8002b76 <_printf_i+0x20a>
 8002b66:	2500      	movs	r5, #0
 8002b68:	f104 0919 	add.w	r9, r4, #25
 8002b6c:	68e3      	ldr	r3, [r4, #12]
 8002b6e:	9a03      	ldr	r2, [sp, #12]
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	429d      	cmp	r5, r3
 8002b74:	db05      	blt.n	8002b82 <_printf_i+0x216>
 8002b76:	68e0      	ldr	r0, [r4, #12]
 8002b78:	9b03      	ldr	r3, [sp, #12]
 8002b7a:	4298      	cmp	r0, r3
 8002b7c:	bfb8      	it	lt
 8002b7e:	4618      	movlt	r0, r3
 8002b80:	e793      	b.n	8002aaa <_printf_i+0x13e>
 8002b82:	2301      	movs	r3, #1
 8002b84:	464a      	mov	r2, r9
 8002b86:	4639      	mov	r1, r7
 8002b88:	4630      	mov	r0, r6
 8002b8a:	47c0      	blx	r8
 8002b8c:	3001      	adds	r0, #1
 8002b8e:	d08a      	beq.n	8002aa6 <_printf_i+0x13a>
 8002b90:	3501      	adds	r5, #1
 8002b92:	e7eb      	b.n	8002b6c <_printf_i+0x200>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1a7      	bne.n	8002ae8 <_printf_i+0x17c>
 8002b98:	780b      	ldrb	r3, [r1, #0]
 8002b9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ba2:	e765      	b.n	8002a70 <_printf_i+0x104>
 8002ba4:	08002e55 	.word	0x08002e55
 8002ba8:	08002e44 	.word	0x08002e44

08002bac <memcpy>:
 8002bac:	b510      	push	{r4, lr}
 8002bae:	1e43      	subs	r3, r0, #1
 8002bb0:	440a      	add	r2, r1
 8002bb2:	4291      	cmp	r1, r2
 8002bb4:	d100      	bne.n	8002bb8 <memcpy+0xc>
 8002bb6:	bd10      	pop	{r4, pc}
 8002bb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bc0:	e7f7      	b.n	8002bb2 <memcpy+0x6>

08002bc2 <memmove>:
 8002bc2:	4288      	cmp	r0, r1
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	eb01 0302 	add.w	r3, r1, r2
 8002bca:	d803      	bhi.n	8002bd4 <memmove+0x12>
 8002bcc:	1e42      	subs	r2, r0, #1
 8002bce:	4299      	cmp	r1, r3
 8002bd0:	d10c      	bne.n	8002bec <memmove+0x2a>
 8002bd2:	bd10      	pop	{r4, pc}
 8002bd4:	4298      	cmp	r0, r3
 8002bd6:	d2f9      	bcs.n	8002bcc <memmove+0xa>
 8002bd8:	1881      	adds	r1, r0, r2
 8002bda:	1ad2      	subs	r2, r2, r3
 8002bdc:	42d3      	cmn	r3, r2
 8002bde:	d100      	bne.n	8002be2 <memmove+0x20>
 8002be0:	bd10      	pop	{r4, pc}
 8002be2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002be6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002bea:	e7f7      	b.n	8002bdc <memmove+0x1a>
 8002bec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bf0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002bf4:	e7eb      	b.n	8002bce <memmove+0xc>
	...

08002bf8 <_free_r>:
 8002bf8:	b538      	push	{r3, r4, r5, lr}
 8002bfa:	4605      	mov	r5, r0
 8002bfc:	2900      	cmp	r1, #0
 8002bfe:	d045      	beq.n	8002c8c <_free_r+0x94>
 8002c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c04:	1f0c      	subs	r4, r1, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bfb8      	it	lt
 8002c0a:	18e4      	addlt	r4, r4, r3
 8002c0c:	f000 f8d6 	bl	8002dbc <__malloc_lock>
 8002c10:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <_free_r+0x98>)
 8002c12:	6813      	ldr	r3, [r2, #0]
 8002c14:	4610      	mov	r0, r2
 8002c16:	b933      	cbnz	r3, 8002c26 <_free_r+0x2e>
 8002c18:	6063      	str	r3, [r4, #4]
 8002c1a:	6014      	str	r4, [r2, #0]
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c22:	f000 b8cc 	b.w	8002dbe <__malloc_unlock>
 8002c26:	42a3      	cmp	r3, r4
 8002c28:	d90c      	bls.n	8002c44 <_free_r+0x4c>
 8002c2a:	6821      	ldr	r1, [r4, #0]
 8002c2c:	1862      	adds	r2, r4, r1
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	bf04      	itt	eq
 8002c32:	681a      	ldreq	r2, [r3, #0]
 8002c34:	685b      	ldreq	r3, [r3, #4]
 8002c36:	6063      	str	r3, [r4, #4]
 8002c38:	bf04      	itt	eq
 8002c3a:	1852      	addeq	r2, r2, r1
 8002c3c:	6022      	streq	r2, [r4, #0]
 8002c3e:	6004      	str	r4, [r0, #0]
 8002c40:	e7ec      	b.n	8002c1c <_free_r+0x24>
 8002c42:	4613      	mov	r3, r2
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	b10a      	cbz	r2, 8002c4c <_free_r+0x54>
 8002c48:	42a2      	cmp	r2, r4
 8002c4a:	d9fa      	bls.n	8002c42 <_free_r+0x4a>
 8002c4c:	6819      	ldr	r1, [r3, #0]
 8002c4e:	1858      	adds	r0, r3, r1
 8002c50:	42a0      	cmp	r0, r4
 8002c52:	d10b      	bne.n	8002c6c <_free_r+0x74>
 8002c54:	6820      	ldr	r0, [r4, #0]
 8002c56:	4401      	add	r1, r0
 8002c58:	1858      	adds	r0, r3, r1
 8002c5a:	4282      	cmp	r2, r0
 8002c5c:	6019      	str	r1, [r3, #0]
 8002c5e:	d1dd      	bne.n	8002c1c <_free_r+0x24>
 8002c60:	6810      	ldr	r0, [r2, #0]
 8002c62:	6852      	ldr	r2, [r2, #4]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	4401      	add	r1, r0
 8002c68:	6019      	str	r1, [r3, #0]
 8002c6a:	e7d7      	b.n	8002c1c <_free_r+0x24>
 8002c6c:	d902      	bls.n	8002c74 <_free_r+0x7c>
 8002c6e:	230c      	movs	r3, #12
 8002c70:	602b      	str	r3, [r5, #0]
 8002c72:	e7d3      	b.n	8002c1c <_free_r+0x24>
 8002c74:	6820      	ldr	r0, [r4, #0]
 8002c76:	1821      	adds	r1, r4, r0
 8002c78:	428a      	cmp	r2, r1
 8002c7a:	bf04      	itt	eq
 8002c7c:	6811      	ldreq	r1, [r2, #0]
 8002c7e:	6852      	ldreq	r2, [r2, #4]
 8002c80:	6062      	str	r2, [r4, #4]
 8002c82:	bf04      	itt	eq
 8002c84:	1809      	addeq	r1, r1, r0
 8002c86:	6021      	streq	r1, [r4, #0]
 8002c88:	605c      	str	r4, [r3, #4]
 8002c8a:	e7c7      	b.n	8002c1c <_free_r+0x24>
 8002c8c:	bd38      	pop	{r3, r4, r5, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000008c 	.word	0x2000008c

08002c94 <_malloc_r>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	1ccd      	adds	r5, r1, #3
 8002c98:	f025 0503 	bic.w	r5, r5, #3
 8002c9c:	3508      	adds	r5, #8
 8002c9e:	2d0c      	cmp	r5, #12
 8002ca0:	bf38      	it	cc
 8002ca2:	250c      	movcc	r5, #12
 8002ca4:	2d00      	cmp	r5, #0
 8002ca6:	4606      	mov	r6, r0
 8002ca8:	db01      	blt.n	8002cae <_malloc_r+0x1a>
 8002caa:	42a9      	cmp	r1, r5
 8002cac:	d903      	bls.n	8002cb6 <_malloc_r+0x22>
 8002cae:	230c      	movs	r3, #12
 8002cb0:	6033      	str	r3, [r6, #0]
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
 8002cb6:	f000 f881 	bl	8002dbc <__malloc_lock>
 8002cba:	4a23      	ldr	r2, [pc, #140]	; (8002d48 <_malloc_r+0xb4>)
 8002cbc:	6814      	ldr	r4, [r2, #0]
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	b991      	cbnz	r1, 8002ce8 <_malloc_r+0x54>
 8002cc2:	4c22      	ldr	r4, [pc, #136]	; (8002d4c <_malloc_r+0xb8>)
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	b91b      	cbnz	r3, 8002cd0 <_malloc_r+0x3c>
 8002cc8:	4630      	mov	r0, r6
 8002cca:	f000 f867 	bl	8002d9c <_sbrk_r>
 8002cce:	6020      	str	r0, [r4, #0]
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	f000 f862 	bl	8002d9c <_sbrk_r>
 8002cd8:	1c43      	adds	r3, r0, #1
 8002cda:	d126      	bne.n	8002d2a <_malloc_r+0x96>
 8002cdc:	230c      	movs	r3, #12
 8002cde:	6033      	str	r3, [r6, #0]
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f000 f86c 	bl	8002dbe <__malloc_unlock>
 8002ce6:	e7e4      	b.n	8002cb2 <_malloc_r+0x1e>
 8002ce8:	680b      	ldr	r3, [r1, #0]
 8002cea:	1b5b      	subs	r3, r3, r5
 8002cec:	d41a      	bmi.n	8002d24 <_malloc_r+0x90>
 8002cee:	2b0b      	cmp	r3, #11
 8002cf0:	d90f      	bls.n	8002d12 <_malloc_r+0x7e>
 8002cf2:	600b      	str	r3, [r1, #0]
 8002cf4:	50cd      	str	r5, [r1, r3]
 8002cf6:	18cc      	adds	r4, r1, r3
 8002cf8:	4630      	mov	r0, r6
 8002cfa:	f000 f860 	bl	8002dbe <__malloc_unlock>
 8002cfe:	f104 000b 	add.w	r0, r4, #11
 8002d02:	1d23      	adds	r3, r4, #4
 8002d04:	f020 0007 	bic.w	r0, r0, #7
 8002d08:	1ac3      	subs	r3, r0, r3
 8002d0a:	d01b      	beq.n	8002d44 <_malloc_r+0xb0>
 8002d0c:	425a      	negs	r2, r3
 8002d0e:	50e2      	str	r2, [r4, r3]
 8002d10:	bd70      	pop	{r4, r5, r6, pc}
 8002d12:	428c      	cmp	r4, r1
 8002d14:	bf0d      	iteet	eq
 8002d16:	6863      	ldreq	r3, [r4, #4]
 8002d18:	684b      	ldrne	r3, [r1, #4]
 8002d1a:	6063      	strne	r3, [r4, #4]
 8002d1c:	6013      	streq	r3, [r2, #0]
 8002d1e:	bf18      	it	ne
 8002d20:	460c      	movne	r4, r1
 8002d22:	e7e9      	b.n	8002cf8 <_malloc_r+0x64>
 8002d24:	460c      	mov	r4, r1
 8002d26:	6849      	ldr	r1, [r1, #4]
 8002d28:	e7ca      	b.n	8002cc0 <_malloc_r+0x2c>
 8002d2a:	1cc4      	adds	r4, r0, #3
 8002d2c:	f024 0403 	bic.w	r4, r4, #3
 8002d30:	42a0      	cmp	r0, r4
 8002d32:	d005      	beq.n	8002d40 <_malloc_r+0xac>
 8002d34:	1a21      	subs	r1, r4, r0
 8002d36:	4630      	mov	r0, r6
 8002d38:	f000 f830 	bl	8002d9c <_sbrk_r>
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	d0cd      	beq.n	8002cdc <_malloc_r+0x48>
 8002d40:	6025      	str	r5, [r4, #0]
 8002d42:	e7d9      	b.n	8002cf8 <_malloc_r+0x64>
 8002d44:	bd70      	pop	{r4, r5, r6, pc}
 8002d46:	bf00      	nop
 8002d48:	2000008c 	.word	0x2000008c
 8002d4c:	20000090 	.word	0x20000090

08002d50 <_realloc_r>:
 8002d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d52:	4607      	mov	r7, r0
 8002d54:	4614      	mov	r4, r2
 8002d56:	460e      	mov	r6, r1
 8002d58:	b921      	cbnz	r1, 8002d64 <_realloc_r+0x14>
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002d60:	f7ff bf98 	b.w	8002c94 <_malloc_r>
 8002d64:	b922      	cbnz	r2, 8002d70 <_realloc_r+0x20>
 8002d66:	f7ff ff47 	bl	8002bf8 <_free_r>
 8002d6a:	4625      	mov	r5, r4
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d70:	f000 f826 	bl	8002dc0 <_malloc_usable_size_r>
 8002d74:	4284      	cmp	r4, r0
 8002d76:	d90f      	bls.n	8002d98 <_realloc_r+0x48>
 8002d78:	4621      	mov	r1, r4
 8002d7a:	4638      	mov	r0, r7
 8002d7c:	f7ff ff8a 	bl	8002c94 <_malloc_r>
 8002d80:	4605      	mov	r5, r0
 8002d82:	2800      	cmp	r0, #0
 8002d84:	d0f2      	beq.n	8002d6c <_realloc_r+0x1c>
 8002d86:	4631      	mov	r1, r6
 8002d88:	4622      	mov	r2, r4
 8002d8a:	f7ff ff0f 	bl	8002bac <memcpy>
 8002d8e:	4631      	mov	r1, r6
 8002d90:	4638      	mov	r0, r7
 8002d92:	f7ff ff31 	bl	8002bf8 <_free_r>
 8002d96:	e7e9      	b.n	8002d6c <_realloc_r+0x1c>
 8002d98:	4635      	mov	r5, r6
 8002d9a:	e7e7      	b.n	8002d6c <_realloc_r+0x1c>

08002d9c <_sbrk_r>:
 8002d9c:	b538      	push	{r3, r4, r5, lr}
 8002d9e:	4c06      	ldr	r4, [pc, #24]	; (8002db8 <_sbrk_r+0x1c>)
 8002da0:	2300      	movs	r3, #0
 8002da2:	4605      	mov	r5, r0
 8002da4:	4608      	mov	r0, r1
 8002da6:	6023      	str	r3, [r4, #0]
 8002da8:	f000 f814 	bl	8002dd4 <_sbrk>
 8002dac:	1c43      	adds	r3, r0, #1
 8002dae:	d102      	bne.n	8002db6 <_sbrk_r+0x1a>
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	b103      	cbz	r3, 8002db6 <_sbrk_r+0x1a>
 8002db4:	602b      	str	r3, [r5, #0]
 8002db6:	bd38      	pop	{r3, r4, r5, pc}
 8002db8:	20000244 	.word	0x20000244

08002dbc <__malloc_lock>:
 8002dbc:	4770      	bx	lr

08002dbe <__malloc_unlock>:
 8002dbe:	4770      	bx	lr

08002dc0 <_malloc_usable_size_r>:
 8002dc0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	f1a0 0004 	sub.w	r0, r0, #4
 8002dca:	bfbc      	itt	lt
 8002dcc:	580b      	ldrlt	r3, [r1, r0]
 8002dce:	18c0      	addlt	r0, r0, r3
 8002dd0:	4770      	bx	lr
	...

08002dd4 <_sbrk>:
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <_sbrk+0x14>)
 8002dd6:	6819      	ldr	r1, [r3, #0]
 8002dd8:	4602      	mov	r2, r0
 8002dda:	b909      	cbnz	r1, 8002de0 <_sbrk+0xc>
 8002ddc:	4903      	ldr	r1, [pc, #12]	; (8002dec <_sbrk+0x18>)
 8002dde:	6019      	str	r1, [r3, #0]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	4402      	add	r2, r0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	4770      	bx	lr
 8002de8:	20000094 	.word	0x20000094
 8002dec:	20000248 	.word	0x20000248

08002df0 <_init>:
 8002df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df2:	bf00      	nop
 8002df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df6:	bc08      	pop	{r3}
 8002df8:	469e      	mov	lr, r3
 8002dfa:	4770      	bx	lr

08002dfc <_fini>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	bf00      	nop
 8002e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e02:	bc08      	pop	{r3}
 8002e04:	469e      	mov	lr, r3
 8002e06:	4770      	bx	lr
